
fatfs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005148  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005810  08005810  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005810  08005810  00015810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005818  08005818  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000084  080058a4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  080058a4  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1f9  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d46  00000000  00000000  0002a2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002bff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002c9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b8d  00000000  00000000  0002d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de77  00000000  00000000  00044e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e84  00000000  00000000  00052cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dab38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d94  00000000  00000000  000dab88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000084 	.word	0x20000084
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080052c8 	.word	0x080052c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000088 	.word	0x20000088
 80001d4:	080052c8 	.word	0x080052c8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b092      	sub	sp, #72	; 0x48
 80004e0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e2:	f000 faf9 	bl	8000ad8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e6:	f000 f8c9 	bl	800067c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ea:	f000 f95b 	bl	80007a4 <MX_GPIO_Init>
	MX_SPI1_Init();
 80004ee:	f000 f923 	bl	8000738 <MX_SPI1_Init>
	MX_FATFS_Init();
 80004f2:	f001 fa7b 	bl	80019ec <MX_FATFS_Init>
	FRESULT status;

	uint8_t *image;
	bmp_t propertiesBmp;

	fatfs = malloc(sizeof(FATFS));
 80004f6:	f44f 700d 	mov.w	r0, #564	; 0x234
 80004fa:	f004 f9d7 	bl	80048ac <malloc>
 80004fe:	4603      	mov	r3, r0
 8000500:	63fb      	str	r3, [r7, #60]	; 0x3c
	file = malloc(sizeof(FIL));
 8000502:	f44f 700c 	mov.w	r0, #560	; 0x230
 8000506:	f004 f9d1 	bl	80048ac <malloc>
 800050a:	4603      	mov	r3, r0
 800050c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while(1){
		// Disk Mount
		status = f_mount(fatfs, "", 0);
 800050e:	2200      	movs	r2, #0
 8000510:	4956      	ldr	r1, [pc, #344]	; (800066c <main+0x190>)
 8000512:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000514:	f003 fb32 	bl	8003b7c <f_mount>
 8000518:	4603      	mov	r3, r0
 800051a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(status != FR_OK)
 800051e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <main+0x50>
			printf("disk is not ready\n");
 8000526:	4852      	ldr	r0, [pc, #328]	; (8000670 <main+0x194>)
 8000528:	f004 fb1e 	bl	8004b68 <puts>

		// File Read
		status = f_open(file, "teat.bmp", FA_READ);
 800052c:	2201      	movs	r2, #1
 800052e:	4951      	ldr	r1, [pc, #324]	; (8000674 <main+0x198>)
 8000530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000532:	f003 fb69 	bl	8003c08 <f_open>
 8000536:	4603      	mov	r3, r0
 8000538:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(status != FR_OK)
 800053c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <main+0x6e>
			printf("file not found!\n");
 8000544:	484c      	ldr	r0, [pc, #304]	; (8000678 <main+0x19c>)
 8000546:	f004 fb0f 	bl	8004b68 <puts>

		// Header Read
		f_read(file, propertiesBmp.bmpType, 2, NULL);
 800054a:	f107 0110 	add.w	r1, r7, #16
 800054e:	2300      	movs	r3, #0
 8000550:	2202      	movs	r2, #2
 8000552:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000554:	f003 fd16 	bl	8003f84 <f_read>
		f_read(file, propertiesBmp.bmpSize, 4, NULL);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	1c99      	adds	r1, r3, #2
 800055e:	2300      	movs	r3, #0
 8000560:	2204      	movs	r2, #4
 8000562:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000564:	f003 fd0e 	bl	8003f84 <f_read>
		f_read(file, propertiesBmp.bmpReserved, 4, NULL);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	1d99      	adds	r1, r3, #6
 800056e:	2300      	movs	r3, #0
 8000570:	2204      	movs	r2, #4
 8000572:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000574:	f003 fd06 	bl	8003f84 <f_read>
		f_read(file, propertiesBmp.bmpOffset, 4, NULL);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	f103 010a 	add.w	r1, r3, #10
 8000580:	2300      	movs	r3, #0
 8000582:	2204      	movs	r2, #4
 8000584:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000586:	f003 fcfd 	bl	8003f84 <f_read>
		f_read(file, propertiesBmp.bidSize, 4, NULL);
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	f103 010e 	add.w	r1, r3, #14
 8000592:	2300      	movs	r3, #0
 8000594:	2204      	movs	r2, #4
 8000596:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000598:	f003 fcf4 	bl	8003f84 <f_read>
		f_read(file, propertiesBmp.bidWidth, 4, NULL);
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	f103 0112 	add.w	r1, r3, #18
 80005a4:	2300      	movs	r3, #0
 80005a6:	2204      	movs	r2, #4
 80005a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80005aa:	f003 fceb 	bl	8003f84 <f_read>
		f_read(file, propertiesBmp.bidHeight, 4, NULL);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	f103 0116 	add.w	r1, r3, #22
 80005b6:	2300      	movs	r3, #0
 80005b8:	2204      	movs	r2, #4
 80005ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80005bc:	f003 fce2 	bl	8003f84 <f_read>
		f_read(file, propertiesBmp.bidColorPlane, 2, NULL);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	f103 011a 	add.w	r1, r3, #26
 80005c8:	2300      	movs	r3, #0
 80005ca:	2202      	movs	r2, #2
 80005cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80005ce:	f003 fcd9 	bl	8003f84 <f_read>
		f_read(file, propertiesBmp.bidBitPerPixel, 2, NULL);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	f103 011c 	add.w	r1, r3, #28
 80005da:	2300      	movs	r3, #0
 80005dc:	2202      	movs	r2, #2
 80005de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80005e0:	f003 fcd0 	bl	8003f84 <f_read>
 80005e4:	f8d7 3012 	ldr.w	r3, [r7, #18]
		uint32_t offset, width, height;
		memcpy(&offset, propertiesBmp.bmpSize, 4);
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	f8d7 3022 	ldr.w	r3, [r7, #34]	; 0x22
		memcpy(&width, propertiesBmp.bidWidth, 4);
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	f8d7 3026 	ldr.w	r3, [r7, #38]	; 0x26
		memcpy(&height, propertiesBmp.bidHeight, 4);
 80005f4:	607b      	str	r3, [r7, #4]

		// Image Start Location Jump
		f_lseek(file, offset);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	4619      	mov	r1, r3
 80005fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80005fc:	f003 fe01 	bl	8004202 <f_lseek>

		// Image Read
		image = malloc(width * height * 3);
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	fb03 f202 	mul.w	r2, r3, r2
 8000608:	4613      	mov	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	4413      	add	r3, r2
 800060e:	4618      	mov	r0, r3
 8000610:	f004 f94c 	bl	80048ac <malloc>
 8000614:	4603      	mov	r3, r0
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
		for(int y = 0; y < height; y++){
 8000618:	2300      	movs	r3, #0
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
 800061c:	e020      	b.n	8000660 <main+0x184>
			for(int x = 0; x < width; x++){
 800061e:	2300      	movs	r3, #0
 8000620:	643b      	str	r3, [r7, #64]	; 0x40
 8000622:	e016      	b.n	8000652 <main+0x176>
				f_read(file, &image[(x*3) + (y*width*3)], 3, NULL);
 8000624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000626:	4613      	mov	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4413      	add	r3, r2
 800062c:	4619      	mov	r1, r3
 800062e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	fb03 f202 	mul.w	r2, r3, r2
 8000636:	4613      	mov	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4413      	add	r3, r2
 800063c:	440b      	add	r3, r1
 800063e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000640:	18d1      	adds	r1, r2, r3
 8000642:	2300      	movs	r3, #0
 8000644:	2203      	movs	r2, #3
 8000646:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000648:	f003 fc9c 	bl	8003f84 <f_read>
			for(int x = 0; x < width; x++){
 800064c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800064e:	3301      	adds	r3, #1
 8000650:	643b      	str	r3, [r7, #64]	; 0x40
 8000652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3e4      	bcc.n	8000624 <main+0x148>
		for(int y = 0; y < height; y++){
 800065a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800065c:	3301      	adds	r3, #1
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
 8000660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	429a      	cmp	r2, r3
 8000666:	d3da      	bcc.n	800061e <main+0x142>
	while(1){
 8000668:	e751      	b.n	800050e <main+0x32>
 800066a:	bf00      	nop
 800066c:	080052e0 	.word	0x080052e0
 8000670:	080052e4 	.word	0x080052e4
 8000674:	080052f8 	.word	0x080052f8
 8000678:	08005304 	.word	0x08005304

0800067c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 f916 	bl	80048bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xb4>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xb4>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xb4>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <SystemClock_Config+0xb8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <SystemClock_Config+0xb8>)
 80006c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <SystemClock_Config+0xb8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fccf 	bl	8001090 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x80>
		Error_Handler();
 80006f8:	f000 f86e 	bl	80007d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]

	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK){
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f000 ff32 	bl	8001580 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xaa>
		Error_Handler();
 8000722:	f000 f859 	bl	80007d8 <Error_Handler>
	}
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_SPI1_Init+0x64>)
 800073e:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <MX_SPI1_Init+0x68>)
 8000740:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_SPI1_Init+0x64>)
 8000744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000748:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_SPI1_Init+0x64>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_SPI1_Init+0x64>)
 8000784:	220a      	movs	r2, #10
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
	if(HAL_SPI_Init(&hspi1) != HAL_OK){
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_SPI1_Init+0x64>)
 800078a:	f001 f8a5 	bl	80018d8 <HAL_SPI_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000794:	f000 f820 	bl	80007d8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000a0 	.word	0x200000a0
 80007a0:	40013000 	.word	0x40013000

080007a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_GPIO_Init+0x30>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <MX_GPIO_Init+0x30>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_GPIO_Init+0x30>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1){
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <HAL_MspInit+0x4c>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x4c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <HAL_SPI_MspInit+0x84>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d12b      	bne.n	80008ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_SPI_MspInit+0x88>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_SPI_MspInit+0x88>)
 8000860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_SPI_MspInit+0x88>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_SPI_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_SPI_MspInit+0x88>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_SPI_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800088e:	23e0      	movs	r3, #224	; 0xe0
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800089e:	2305      	movs	r3, #5
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <HAL_SPI_MspInit+0x8c>)
 80008aa:	f000 fa6d 	bl	8000d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40013000 	.word	0x40013000
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f934 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	e00a      	b.n	8000940 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800092a:	f3af 8000 	nop.w
 800092e:	4601      	mov	r1, r0
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	60ba      	str	r2, [r7, #8]
 8000936:	b2ca      	uxtb	r2, r1
 8000938:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	3301      	adds	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	429a      	cmp	r2, r3
 8000946:	dbf0      	blt.n	800092a <_read+0x12>
  }

  return len;
 8000948:	687b      	ldr	r3, [r7, #4]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	e009      	b.n	8000978 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	60ba      	str	r2, [r7, #8]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbf1      	blt.n	8000964 <_write+0x12>
  }
  return len;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <_close>:

int _close(int file)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b2:	605a      	str	r2, [r3, #4]
  return 0;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <_isatty>:

int _isatty(int file)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <_sbrk+0x5c>)
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <_sbrk+0x60>)
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <_sbrk+0x64>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <_sbrk+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d207      	bcs.n	8000a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a24:	f003 ff18 	bl	8004858 <__errno>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	e009      	b.n	8000a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <_sbrk+0x64>)
 8000a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20020000 	.word	0x20020000
 8000a54:	00000400 	.word	0x00000400
 8000a58:	200000f8 	.word	0x200000f8
 8000a5c:	20000350 	.word	0x20000350

08000a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a8a:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa0:	4c0b      	ldr	r4, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aae:	f7ff ffd7 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f003 fed7 	bl	8004864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab6:	f7ff fd11 	bl	80004dc <main>
  bx  lr    
 8000aba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000ac8:	08005820 	.word	0x08005820
  ldr r2, =_sbss
 8000acc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ad0:	2000034c 	.word	0x2000034c

08000ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <HAL_Init+0x40>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_Init+0x40>)
 8000aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_Init+0x40>)
 8000afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f90d 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b06:	200f      	movs	r0, #15
 8000b08:	f000 f808 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff fe6a 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023c00 	.word	0x40023c00

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x54>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x58>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f917 	bl	8000d6e <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f000 f8ed 	bl	8000d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_InitTick+0x5c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	200000fc 	.word	0x200000fc

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200000fc 	.word	0x200000fc

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f7ff ff8e 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff47 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff5c 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff8e 	bl	8000c74 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5d 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ffb0 	bl	8000cdc <SysTick_Config>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	e159      	b.n	8001058 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f040 8148 	bne.w	8001052 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d005      	beq.n	8000dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d130      	bne.n	8000e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d017      	beq.n	8000e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d123      	bne.n	8000ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	69b9      	ldr	r1, [r7, #24]
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0203 	and.w	r2, r3, #3
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80a2 	beq.w	8001052 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b57      	ldr	r3, [pc, #348]	; (8001070 <HAL_GPIO_Init+0x2e8>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a56      	ldr	r2, [pc, #344]	; (8001070 <HAL_GPIO_Init+0x2e8>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b54      	ldr	r3, [pc, #336]	; (8001070 <HAL_GPIO_Init+0x2e8>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2a:	4a52      	ldr	r2, [pc, #328]	; (8001074 <HAL_GPIO_Init+0x2ec>)
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <HAL_GPIO_Init+0x2f0>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x202>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a48      	ldr	r2, [pc, #288]	; (800107c <HAL_GPIO_Init+0x2f4>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x1fe>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a47      	ldr	r2, [pc, #284]	; (8001080 <HAL_GPIO_Init+0x2f8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x1fa>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a46      	ldr	r2, [pc, #280]	; (8001084 <HAL_GPIO_Init+0x2fc>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x1f6>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a45      	ldr	r2, [pc, #276]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x1f2>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e008      	b.n	8000f8c <HAL_GPIO_Init+0x204>
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x204>
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e004      	b.n	8000f8c <HAL_GPIO_Init+0x204>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_Init+0x204>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_GPIO_Init+0x204>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	f002 0203 	and.w	r2, r2, #3
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	4093      	lsls	r3, r2
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f9c:	4935      	ldr	r1, [pc, #212]	; (8001074 <HAL_GPIO_Init+0x2ec>)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000faa:	4b38      	ldr	r3, [pc, #224]	; (800108c <HAL_GPIO_Init+0x304>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fce:	4a2f      	ldr	r2, [pc, #188]	; (800108c <HAL_GPIO_Init+0x304>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_GPIO_Init+0x304>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff8:	4a24      	ldr	r2, [pc, #144]	; (800108c <HAL_GPIO_Init+0x304>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <HAL_GPIO_Init+0x304>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001022:	4a1a      	ldr	r2, [pc, #104]	; (800108c <HAL_GPIO_Init+0x304>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_GPIO_Init+0x304>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <HAL_GPIO_Init+0x304>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	2b0f      	cmp	r3, #15
 800105c:	f67f aea2 	bls.w	8000da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40013800 	.word	0x40013800
 8001078:	40020000 	.word	0x40020000
 800107c:	40020400 	.word	0x40020400
 8001080:	40020800 	.word	0x40020800
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40021000 	.word	0x40021000
 800108c:	40013c00 	.word	0x40013c00

08001090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e267      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d075      	beq.n	800119a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ae:	4b88      	ldr	r3, [pc, #544]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d00c      	beq.n	80010d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ba:	4b85      	ldr	r3, [pc, #532]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d112      	bne.n	80010ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c6:	4b82      	ldr	r3, [pc, #520]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010d2:	d10b      	bne.n	80010ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d4:	4b7e      	ldr	r3, [pc, #504]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d05b      	beq.n	8001198 <HAL_RCC_OscConfig+0x108>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d157      	bne.n	8001198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e242      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d106      	bne.n	8001104 <HAL_RCC_OscConfig+0x74>
 80010f6:	4b76      	ldr	r3, [pc, #472]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a75      	ldr	r2, [pc, #468]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e01d      	b.n	8001140 <HAL_RCC_OscConfig+0xb0>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800110c:	d10c      	bne.n	8001128 <HAL_RCC_OscConfig+0x98>
 800110e:	4b70      	ldr	r3, [pc, #448]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a6f      	ldr	r2, [pc, #444]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 8001114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b6d      	ldr	r3, [pc, #436]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a6c      	ldr	r2, [pc, #432]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e00b      	b.n	8001140 <HAL_RCC_OscConfig+0xb0>
 8001128:	4b69      	ldr	r3, [pc, #420]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a68      	ldr	r2, [pc, #416]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 800112e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b66      	ldr	r3, [pc, #408]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a65      	ldr	r2, [pc, #404]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 800113a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d013      	beq.n	8001170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fd2c 	bl	8000ba4 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fd28 	bl	8000ba4 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e207      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0xc0>
 800116e:	e014      	b.n	800119a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fd18 	bl	8000ba4 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001178:	f7ff fd14 	bl	8000ba4 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b64      	cmp	r3, #100	; 0x64
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e1f3      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	4b51      	ldr	r3, [pc, #324]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0xe8>
 8001196:	e000      	b.n	800119a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d063      	beq.n	800126e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011a6:	4b4a      	ldr	r3, [pc, #296]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00b      	beq.n	80011ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d11c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011be:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d116      	bne.n	80011f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d005      	beq.n	80011e2 <HAL_RCC_OscConfig+0x152>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d001      	beq.n	80011e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e1c7      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	4937      	ldr	r1, [pc, #220]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f6:	e03a      	b.n	800126e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d020      	beq.n	8001242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <HAL_RCC_OscConfig+0x244>)
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001206:	f7ff fccd 	bl	8000ba4 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120e:	f7ff fcc9 	bl	8000ba4 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e1a8      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122c:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4925      	ldr	r1, [pc, #148]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
 8001240:	e015      	b.n	800126e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <HAL_RCC_OscConfig+0x244>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001248:	f7ff fcac 	bl	8000ba4 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001250:	f7ff fca8 	bl	8000ba4 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e187      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	d036      	beq.n	80012e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d016      	beq.n	80012b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_RCC_OscConfig+0x248>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001288:	f7ff fc8c 	bl	8000ba4 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001290:	f7ff fc88 	bl	8000ba4 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e167      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_RCC_OscConfig+0x240>)
 80012a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0x200>
 80012ae:	e01b      	b.n	80012e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_RCC_OscConfig+0x248>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fc75 	bl	8000ba4 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	e00e      	b.n	80012dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012be:	f7ff fc71 	bl	8000ba4 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d907      	bls.n	80012dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e150      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
 80012d0:	40023800 	.word	0x40023800
 80012d4:	42470000 	.word	0x42470000
 80012d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	4b88      	ldr	r3, [pc, #544]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 80012de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1ea      	bne.n	80012be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 8097 	beq.w	8001424 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012fa:	4b81      	ldr	r3, [pc, #516]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10f      	bne.n	8001326 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b7d      	ldr	r3, [pc, #500]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a7c      	ldr	r2, [pc, #496]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b7a      	ldr	r3, [pc, #488]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001322:	2301      	movs	r3, #1
 8001324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001326:	4b77      	ldr	r3, [pc, #476]	; (8001504 <HAL_RCC_OscConfig+0x474>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132e:	2b00      	cmp	r3, #0
 8001330:	d118      	bne.n	8001364 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001332:	4b74      	ldr	r3, [pc, #464]	; (8001504 <HAL_RCC_OscConfig+0x474>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a73      	ldr	r2, [pc, #460]	; (8001504 <HAL_RCC_OscConfig+0x474>)
 8001338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133e:	f7ff fc31 	bl	8000ba4 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001346:	f7ff fc2d 	bl	8000ba4 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e10c      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	4b6a      	ldr	r3, [pc, #424]	; (8001504 <HAL_RCC_OscConfig+0x474>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x2ea>
 800136c:	4b64      	ldr	r3, [pc, #400]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001370:	4a63      	ldr	r2, [pc, #396]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6713      	str	r3, [r2, #112]	; 0x70
 8001378:	e01c      	b.n	80013b4 <HAL_RCC_OscConfig+0x324>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b05      	cmp	r3, #5
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x30c>
 8001382:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	4a5e      	ldr	r2, [pc, #376]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	6713      	str	r3, [r2, #112]	; 0x70
 800138e:	4b5c      	ldr	r3, [pc, #368]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	4a5b      	ldr	r2, [pc, #364]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6713      	str	r3, [r2, #112]	; 0x70
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0x324>
 800139c:	4b58      	ldr	r3, [pc, #352]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	4a57      	ldr	r2, [pc, #348]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	6713      	str	r3, [r2, #112]	; 0x70
 80013a8:	4b55      	ldr	r3, [pc, #340]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	4a54      	ldr	r2, [pc, #336]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 80013ae:	f023 0304 	bic.w	r3, r3, #4
 80013b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d015      	beq.n	80013e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013bc:	f7ff fbf2 	bl	8000ba4 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c2:	e00a      	b.n	80013da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c4:	f7ff fbee 	bl	8000ba4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e0cb      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013da:	4b49      	ldr	r3, [pc, #292]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0ee      	beq.n	80013c4 <HAL_RCC_OscConfig+0x334>
 80013e6:	e014      	b.n	8001412 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e8:	f7ff fbdc 	bl	8000ba4 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ee:	e00a      	b.n	8001406 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f0:	f7ff fbd8 	bl	8000ba4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fe:	4293      	cmp	r3, r2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e0b5      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001406:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1ee      	bne.n	80013f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001412:	7dfb      	ldrb	r3, [r7, #23]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d105      	bne.n	8001424 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001418:	4b39      	ldr	r3, [pc, #228]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	4a38      	ldr	r2, [pc, #224]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 800141e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001422:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80a1 	beq.w	8001570 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800142e:	4b34      	ldr	r3, [pc, #208]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b08      	cmp	r3, #8
 8001438:	d05c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d141      	bne.n	80014c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001442:	4b31      	ldr	r3, [pc, #196]	; (8001508 <HAL_RCC_OscConfig+0x478>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fbac 	bl	8000ba4 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff fba8 	bl	8000ba4 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e087      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001462:	4b27      	ldr	r3, [pc, #156]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69da      	ldr	r2, [r3, #28]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	019b      	lsls	r3, r3, #6
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	085b      	lsrs	r3, r3, #1
 8001486:	3b01      	subs	r3, #1
 8001488:	041b      	lsls	r3, r3, #16
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	061b      	lsls	r3, r3, #24
 8001492:	491b      	ldr	r1, [pc, #108]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x478>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fb81 	bl	8000ba4 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fb7d 	bl	8000ba4 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e05c      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x416>
 80014c4:	e054      	b.n	8001570 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_RCC_OscConfig+0x478>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb6a 	bl	8000ba4 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fb66 	bl	8000ba4 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e045      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_RCC_OscConfig+0x470>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x444>
 80014f2:	e03d      	b.n	8001570 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d107      	bne.n	800150c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e038      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
 8001500:	40023800 	.word	0x40023800
 8001504:	40007000 	.word	0x40007000
 8001508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x4ec>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d028      	beq.n	800156c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001524:	429a      	cmp	r2, r3
 8001526:	d121      	bne.n	800156c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001532:	429a      	cmp	r2, r3
 8001534:	d11a      	bne.n	800156c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800153c:	4013      	ands	r3, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001544:	4293      	cmp	r3, r2
 8001546:	d111      	bne.n	800156c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001552:	085b      	lsrs	r3, r3, #1
 8001554:	3b01      	subs	r3, #1
 8001556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001558:	429a      	cmp	r2, r3
 800155a:	d107      	bne.n	800156c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001568:	429a      	cmp	r2, r3
 800156a:	d001      	beq.n	8001570 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800

08001580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0cc      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001594:	4b68      	ldr	r3, [pc, #416]	; (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d90c      	bls.n	80015bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b65      	ldr	r3, [pc, #404]	; (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b63      	ldr	r3, [pc, #396]	; (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0b8      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d020      	beq.n	800160a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d4:	4b59      	ldr	r3, [pc, #356]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a58      	ldr	r2, [pc, #352]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ec:	4b53      	ldr	r3, [pc, #332]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a52      	ldr	r2, [pc, #328]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f8:	4b50      	ldr	r3, [pc, #320]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	494d      	ldr	r1, [pc, #308]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	4313      	orrs	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d044      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b47      	ldr	r3, [pc, #284]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d119      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e07f      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d003      	beq.n	800163e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163a:	2b03      	cmp	r3, #3
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	4b3f      	ldr	r3, [pc, #252]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e06f      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e067      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f023 0203 	bic.w	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4934      	ldr	r1, [pc, #208]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	4313      	orrs	r3, r2
 800166e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001670:	f7ff fa98 	bl	8000ba4 <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	e00a      	b.n	800168e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001678:	f7ff fa94 	bl	8000ba4 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e04f      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	4b2b      	ldr	r3, [pc, #172]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 020c 	and.w	r2, r3, #12
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	429a      	cmp	r2, r3
 800169e:	d1eb      	bne.n	8001678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d20c      	bcs.n	80016c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b22      	ldr	r3, [pc, #136]	; (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e032      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	4916      	ldr	r1, [pc, #88]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	490e      	ldr	r1, [pc, #56]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001706:	f000 f821 	bl	800174c <HAL_RCC_GetSysClockFreq>
 800170a:	4602      	mov	r2, r0
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	490a      	ldr	r1, [pc, #40]	; (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	5ccb      	ldrb	r3, [r1, r3]
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff f9f8 	bl	8000b1c <HAL_InitTick>

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023c00 	.word	0x40023c00
 800173c:	40023800 	.word	0x40023800
 8001740:	0800535c 	.word	0x0800535c
 8001744:	20000000 	.word	0x20000000
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800174c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001750:	b090      	sub	sp, #64	; 0x40
 8001752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
 8001758:	2300      	movs	r3, #0
 800175a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800175c:	2300      	movs	r3, #0
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001764:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_RCC_GetSysClockFreq+0x180>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b08      	cmp	r3, #8
 800176e:	d00d      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0x40>
 8001770:	2b08      	cmp	r3, #8
 8001772:	f200 80a1 	bhi.w	80018b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x34>
 800177a:	2b04      	cmp	r3, #4
 800177c:	d003      	beq.n	8001786 <HAL_RCC_GetSysClockFreq+0x3a>
 800177e:	e09b      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001784:	e09b      	b.n	80018be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001786:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001788:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800178a:	e098      	b.n	80018be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800178c:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <HAL_RCC_GetSysClockFreq+0x180>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001796:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <HAL_RCC_GetSysClockFreq+0x180>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d028      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a2:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <HAL_RCC_GetSysClockFreq+0x180>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	099b      	lsrs	r3, r3, #6
 80017a8:	2200      	movs	r2, #0
 80017aa:	623b      	str	r3, [r7, #32]
 80017ac:	627a      	str	r2, [r7, #36]	; 0x24
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017b4:	2100      	movs	r1, #0
 80017b6:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017b8:	fb03 f201 	mul.w	r2, r3, r1
 80017bc:	2300      	movs	r3, #0
 80017be:	fb00 f303 	mul.w	r3, r0, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	4a43      	ldr	r2, [pc, #268]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017c6:	fba0 1202 	umull	r1, r2, r0, r2
 80017ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017cc:	460a      	mov	r2, r1
 80017ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80017d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d2:	4413      	add	r3, r2
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d8:	2200      	movs	r2, #0
 80017da:	61bb      	str	r3, [r7, #24]
 80017dc:	61fa      	str	r2, [r7, #28]
 80017de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017e6:	f7fe fcf7 	bl	80001d8 <__aeabi_uldivmod>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4613      	mov	r3, r2
 80017f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017f2:	e053      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f4:	4b35      	ldr	r3, [pc, #212]	; (80018cc <HAL_RCC_GetSysClockFreq+0x180>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	2200      	movs	r2, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	617a      	str	r2, [r7, #20]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001806:	f04f 0b00 	mov.w	fp, #0
 800180a:	4652      	mov	r2, sl
 800180c:	465b      	mov	r3, fp
 800180e:	f04f 0000 	mov.w	r0, #0
 8001812:	f04f 0100 	mov.w	r1, #0
 8001816:	0159      	lsls	r1, r3, #5
 8001818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800181c:	0150      	lsls	r0, r2, #5
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	ebb2 080a 	subs.w	r8, r2, sl
 8001826:	eb63 090b 	sbc.w	r9, r3, fp
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001836:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800183a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800183e:	ebb2 0408 	subs.w	r4, r2, r8
 8001842:	eb63 0509 	sbc.w	r5, r3, r9
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	00eb      	lsls	r3, r5, #3
 8001850:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001854:	00e2      	lsls	r2, r4, #3
 8001856:	4614      	mov	r4, r2
 8001858:	461d      	mov	r5, r3
 800185a:	eb14 030a 	adds.w	r3, r4, sl
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	eb45 030b 	adc.w	r3, r5, fp
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001872:	4629      	mov	r1, r5
 8001874:	028b      	lsls	r3, r1, #10
 8001876:	4621      	mov	r1, r4
 8001878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800187c:	4621      	mov	r1, r4
 800187e:	028a      	lsls	r2, r1, #10
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001886:	2200      	movs	r2, #0
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	60fa      	str	r2, [r7, #12]
 800188c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001890:	f7fe fca2 	bl	80001d8 <__aeabi_uldivmod>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4613      	mov	r3, r2
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_GetSysClockFreq+0x180>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	0c1b      	lsrs	r3, r3, #16
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	3301      	adds	r3, #1
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80018ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018b6:	e002      	b.n	80018be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80018ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3740      	adds	r7, #64	; 0x40
 80018c4:	46bd      	mov	sp, r7
 80018c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	00f42400 	.word	0x00f42400
 80018d4:	017d7840 	.word	0x017d7840

080018d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e07b      	b.n	80019e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d108      	bne.n	8001904 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018fa:	d009      	beq.n	8001910 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
 8001902:	e005      	b.n	8001910 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7fe ff82 	bl	8000834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001946:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001994:	ea42 0103 	orr.w	r1, r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	0c1b      	lsrs	r3, r3, #16
 80019ae:	f003 0104 	and.w	r1, r3, #4
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f003 0210 	and.w	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	69da      	ldr	r2, [r3, #28]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80019f0:	4904      	ldr	r1, [pc, #16]	; (8001a04 <MX_FATFS_Init+0x18>)
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_FATFS_Init+0x1c>)
 80019f4:	f002 fe5a 	bl	80046ac <FATFS_LinkDriver>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <MX_FATFS_Init+0x20>)
 80019fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000104 	.word	0x20000104
 8001a08:	2000000c 	.word	0x2000000c
 8001a0c:	20000100 	.word	0x20000100

08001a10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8001a14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <USER_initialize+0x24>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <USER_initialize+0x24>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000009 	.word	0x20000009

08001a48 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <USER_status+0x24>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
    return Stat;
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <USER_status+0x24>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000009 	.word	0x20000009

08001a70 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8001a80:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8001a9e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	603a      	str	r2, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
    return res;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <disk_status+0x30>)
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	79fa      	ldrb	r2, [r7, #7]
 8001ae8:	4905      	ldr	r1, [pc, #20]	; (8001b00 <disk_status+0x30>)
 8001aea:	440a      	add	r2, r1
 8001aec:	7a12      	ldrb	r2, [r2, #8]
 8001aee:	4610      	mov	r0, r2
 8001af0:	4798      	blx	r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000330 	.word	0x20000330

08001b04 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4a0d      	ldr	r2, [pc, #52]	; (8001b4c <disk_initialize+0x48>)
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d111      	bne.n	8001b40 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <disk_initialize+0x48>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <disk_initialize+0x48>)
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	79fa      	ldrb	r2, [r7, #7]
 8001b32:	4906      	ldr	r1, [pc, #24]	; (8001b4c <disk_initialize+0x48>)
 8001b34:	440a      	add	r2, r1
 8001b36:	7a12      	ldrb	r2, [r2, #8]
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4798      	blx	r3
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000330 	.word	0x20000330

08001b50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <disk_read+0x3c>)
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	689c      	ldr	r4, [r3, #8]
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <disk_read+0x3c>)
 8001b70:	4413      	add	r3, r2
 8001b72:	7a18      	ldrb	r0, [r3, #8]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	47a0      	blx	r4
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd90      	pop	{r4, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000330 	.word	0x20000330

08001b90 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <disk_write+0x3c>)
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	68dc      	ldr	r4, [r3, #12]
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <disk_write+0x3c>)
 8001bb0:	4413      	add	r3, r2
 8001bb2:	7a18      	ldrb	r0, [r3, #8]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	47a0      	blx	r4
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	75fb      	strb	r3, [r7, #23]
  return res;
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000330 	.word	0x20000330

08001bd0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8001be0:	89fb      	ldrh	r3, [r7, #14]
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	b21a      	sxth	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8001bf2:	89fb      	ldrh	r3, [r7, #14]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3303      	adds	r3, #3
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	3202      	adds	r2, #2
 8001c18:	7812      	ldrb	r2, [r2, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	3201      	adds	r2, #1
 8001c26:	7812      	ldrb	r2, [r2, #0]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	7812      	ldrb	r2, [r2, #0]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
	return rv;
 8001c38:	68fb      	ldr	r3, [r7, #12]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	887a      	ldrh	r2, [r7, #2]
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	701a      	strb	r2, [r3, #0]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	701a      	strb	r2, [r3, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00d      	beq.n	8001d0a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	1c53      	adds	r3, r2, #1
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	1c59      	adds	r1, r3, #1
 8001cf8:	6179      	str	r1, [r7, #20]
 8001cfa:	7812      	ldrb	r2, [r2, #0]
 8001cfc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f1      	bne.n	8001cee <mem_cpy+0x1a>
	}
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8001d16:	b480      	push	{r7}
 8001d18:	b087      	sub	sp, #28
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	617a      	str	r2, [r7, #20]
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f3      	bne.n	8001d26 <mem_set+0x10>
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	61fa      	str	r2, [r7, #28]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	61ba      	str	r2, [r7, #24]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	1acb      	subs	r3, r1, r3
 8001d78:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <mem_cmp+0x40>
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0eb      	beq.n	8001d64 <mem_cmp+0x18>

	return r;
 8001d8c:	697b      	ldr	r3, [r7, #20]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8001da4:	e002      	b.n	8001dac <chk_chr+0x12>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3301      	adds	r3, #1
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <chk_chr+0x26>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d1f2      	bne.n	8001da6 <chk_chr+0xc>
	return *str;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	e029      	b.n	8001e38 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8001de4:	4a27      	ldr	r2, [pc, #156]	; (8001e84 <chk_lock+0xb4>)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	4413      	add	r3, r2
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01d      	beq.n	8001e2e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001df2:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <chk_lock+0xb4>)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	4413      	add	r3, r2
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d116      	bne.n	8001e32 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8001e04:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <chk_lock+0xb4>)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d10c      	bne.n	8001e32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8001e18:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <chk_lock+0xb4>)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	4413      	add	r3, r2
 8001e20:	3308      	adds	r3, #8
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d102      	bne.n	8001e32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8001e2c:	e007      	b.n	8001e3e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3301      	adds	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d9d2      	bls.n	8001de4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d109      	bne.n	8001e58 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <chk_lock+0x80>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d101      	bne.n	8001e54 <chk_lock+0x84>
 8001e50:	2300      	movs	r3, #0
 8001e52:	e010      	b.n	8001e76 <chk_lock+0xa6>
 8001e54:	2312      	movs	r3, #18
 8001e56:	e00e      	b.n	8001e76 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d108      	bne.n	8001e70 <chk_lock+0xa0>
 8001e5e:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <chk_lock+0xb4>)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	4413      	add	r3, r2
 8001e66:	330c      	adds	r3, #12
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6e:	d101      	bne.n	8001e74 <chk_lock+0xa4>
 8001e70:	2310      	movs	r3, #16
 8001e72:	e000      	b.n	8001e76 <chk_lock+0xa6>
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000110 	.word	0x20000110

08001e88 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	e002      	b.n	8001e9a <enq_lock+0x12>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3301      	adds	r3, #1
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d806      	bhi.n	8001eae <enq_lock+0x26>
 8001ea0:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <enq_lock+0x40>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	4413      	add	r3, r2
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f2      	bne.n	8001e94 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000110 	.word	0x20000110

08001ecc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	e01f      	b.n	8001f1c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8001edc:	4a41      	ldr	r2, [pc, #260]	; (8001fe4 <inc_lock+0x118>)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d113      	bne.n	8001f16 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8001eee:	4a3d      	ldr	r2, [pc, #244]	; (8001fe4 <inc_lock+0x118>)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d109      	bne.n	8001f16 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8001f02:	4a38      	ldr	r2, [pc, #224]	; (8001fe4 <inc_lock+0x118>)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	4413      	add	r3, r2
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d006      	beq.n	8001f24 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d9dc      	bls.n	8001edc <inc_lock+0x10>
 8001f22:	e000      	b.n	8001f26 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8001f24:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d132      	bne.n	8001f92 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	e002      	b.n	8001f38 <inc_lock+0x6c>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3301      	adds	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d806      	bhi.n	8001f4c <inc_lock+0x80>
 8001f3e:	4a29      	ldr	r2, [pc, #164]	; (8001fe4 <inc_lock+0x118>)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	4413      	add	r3, r2
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f2      	bne.n	8001f32 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d101      	bne.n	8001f56 <inc_lock+0x8a>
 8001f52:	2300      	movs	r3, #0
 8001f54:	e040      	b.n	8001fd8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4922      	ldr	r1, [pc, #136]	; (8001fe4 <inc_lock+0x118>)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	440b      	add	r3, r1
 8001f62:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	491e      	ldr	r1, [pc, #120]	; (8001fe4 <inc_lock+0x118>)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	440b      	add	r3, r1
 8001f70:	3304      	adds	r3, #4
 8001f72:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	491a      	ldr	r1, [pc, #104]	; (8001fe4 <inc_lock+0x118>)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	440b      	add	r3, r1
 8001f80:	3308      	adds	r3, #8
 8001f82:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8001f84:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <inc_lock+0x118>)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	4413      	add	r3, r2
 8001f8c:	330c      	adds	r3, #12
 8001f8e:	2200      	movs	r2, #0
 8001f90:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <inc_lock+0xe0>
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <inc_lock+0x118>)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	4413      	add	r3, r2
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <inc_lock+0xe0>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e015      	b.n	8001fd8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d108      	bne.n	8001fc4 <inc_lock+0xf8>
 8001fb2:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <inc_lock+0x118>)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	4413      	add	r3, r2
 8001fba:	330c      	adds	r3, #12
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	e001      	b.n	8001fc8 <inc_lock+0xfc>
 8001fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc8:	4906      	ldr	r1, [pc, #24]	; (8001fe4 <inc_lock+0x118>)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	440b      	add	r3, r1
 8001fd0:	330c      	adds	r3, #12
 8001fd2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3301      	adds	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	20000110 	.word	0x20000110

08001fe8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	e010      	b.n	8002018 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001ff6:	4a0d      	ldr	r2, [pc, #52]	; (800202c <clear_lock+0x44>)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	4413      	add	r3, r2
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	429a      	cmp	r2, r3
 8002004:	d105      	bne.n	8002012 <clear_lock+0x2a>
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <clear_lock+0x44>)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	4413      	add	r3, r2
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3301      	adds	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d9eb      	bls.n	8001ff6 <clear_lock+0xe>
	}
}
 800201e:	bf00      	nop
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	20000110 	.word	0x20000110

08002030 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	78db      	ldrb	r3, [r3, #3]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d034      	beq.n	80020ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7858      	ldrb	r0, [r3, #1]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002054:	2301      	movs	r3, #1
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	f7ff fd9a 	bl	8001b90 <disk_write>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <sync_window+0x38>
			res = FR_DISK_ERR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e022      	b.n	80020ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	1ad2      	subs	r2, r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	429a      	cmp	r2, r3
 800207c:	d217      	bcs.n	80020ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	789b      	ldrb	r3, [r3, #2]
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e010      	b.n	80020a8 <sync_window+0x78>
					wsect += fs->fsize;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4413      	add	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7858      	ldrb	r0, [r3, #1]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800209a:	2301      	movs	r3, #1
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	f7ff fd77 	bl	8001b90 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d8eb      	bhi.n	8002086 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d01b      	beq.n	8002108 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ffad 	bl	8002030 <sync_window>
 80020d6:	4603      	mov	r3, r0
 80020d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d113      	bne.n	8002108 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7858      	ldrb	r0, [r3, #1]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80020ea:	2301      	movs	r3, #1
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	f7ff fd2f 	bl	8001b50 <disk_read>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d004      	beq.n	8002102 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	3b02      	subs	r3, #2
 8002120:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	3b02      	subs	r3, #2
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d301      	bcc.n	8002132 <clust2sect+0x20>
 800212e:	2300      	movs	r3, #0
 8002130:	e008      	b.n	8002144 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	895b      	ldrh	r3, [r3, #10]
 8002136:	461a      	mov	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	fb03 f202 	mul.w	r2, r3, r2
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	4413      	add	r3, r2
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d904      	bls.n	8002170 <get_fat+0x20>
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d302      	bcc.n	8002176 <get_fat+0x26>
		val = 1;	/* Internal error */
 8002170:	2301      	movs	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e08f      	b.n	8002296 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d062      	beq.n	800224a <get_fat+0xfa>
 8002184:	2b03      	cmp	r3, #3
 8002186:	dc7c      	bgt.n	8002282 <get_fat+0x132>
 8002188:	2b01      	cmp	r3, #1
 800218a:	d002      	beq.n	8002192 <get_fat+0x42>
 800218c:	2b02      	cmp	r3, #2
 800218e:	d042      	beq.n	8002216 <get_fat+0xc6>
 8002190:	e077      	b.n	8002282 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4413      	add	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	0a5b      	lsrs	r3, r3, #9
 80021a8:	4413      	add	r3, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	6938      	ldr	r0, [r7, #16]
 80021ae:	f7ff ff83 	bl	80020b8 <move_window>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d167      	bne.n	8002288 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	60fa      	str	r2, [r7, #12]
 80021be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ca:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	0a5b      	lsrs	r3, r3, #9
 80021d4:	4413      	add	r3, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	6938      	ldr	r0, [r7, #16]
 80021da:	f7ff ff6d 	bl	80020b8 <move_window>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d153      	bne.n	800228c <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <get_fat+0xbc>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	e002      	b.n	8002212 <get_fat+0xc2>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002212:	617b      	str	r3, [r7, #20]
			break;
 8002214:	e03f      	b.n	8002296 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	4413      	add	r3, r2
 8002220:	4619      	mov	r1, r3
 8002222:	6938      	ldr	r0, [r7, #16]
 8002224:	f7ff ff48 	bl	80020b8 <move_window>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d130      	bne.n	8002290 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800223c:	4413      	add	r3, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fcc6 	bl	8001bd0 <ld_word>
 8002244:	4603      	mov	r3, r0
 8002246:	617b      	str	r3, [r7, #20]
			break;
 8002248:	e025      	b.n	8002296 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	09db      	lsrs	r3, r3, #7
 8002252:	4413      	add	r3, r2
 8002254:	4619      	mov	r1, r3
 8002256:	6938      	ldr	r0, [r7, #16]
 8002258:	f7ff ff2e 	bl	80020b8 <move_window>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d118      	bne.n	8002294 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002270:	4413      	add	r3, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fcc4 	bl	8001c00 <ld_dword>
 8002278:	4603      	mov	r3, r0
 800227a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800227e:	617b      	str	r3, [r7, #20]
			break;
 8002280:	e009      	b.n	8002296 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002282:	2301      	movs	r3, #1
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e006      	b.n	8002296 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002288:	bf00      	nop
 800228a:	e004      	b.n	8002296 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800228c:	bf00      	nop
 800228e:	e002      	b.n	8002296 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002290:	bf00      	nop
 8002292:	e000      	b.n	8002296 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002294:	bf00      	nop
		}
	}

	return val;
 8002296:	697b      	ldr	r3, [r7, #20]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80022ac:	2302      	movs	r3, #2
 80022ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	f240 80d2 	bls.w	800245c <put_fat+0x1bc>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	f080 80cc 	bcs.w	800245c <put_fat+0x1bc>
		switch (fs->fs_type) {
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	f000 8096 	beq.w	80023fa <put_fat+0x15a>
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	f300 80cd 	bgt.w	800246e <put_fat+0x1ce>
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d002      	beq.n	80022de <put_fat+0x3e>
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d06e      	beq.n	80023ba <put_fat+0x11a>
 80022dc:	e0c7      	b.n	800246e <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4413      	add	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	0a5b      	lsrs	r3, r3, #9
 80022f4:	4413      	add	r3, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f7ff fedd 	bl	80020b8 <move_window>
 80022fe:	4603      	mov	r3, r0
 8002300:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002302:	7ffb      	ldrb	r3, [r7, #31]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 80ab 	bne.w	8002460 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	1c59      	adds	r1, r3, #1
 8002314:	61b9      	str	r1, [r7, #24]
 8002316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800231a:	4413      	add	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <put_fat+0xa4>
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b25b      	sxtb	r3, r3
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	b25a      	sxtb	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	b25b      	sxtb	r3, r3
 800233c:	4313      	orrs	r3, r2
 800233e:	b25b      	sxtb	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	e001      	b.n	8002348 <put_fat+0xa8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	0a5b      	lsrs	r3, r3, #9
 800235a:	4413      	add	r3, r2
 800235c:	4619      	mov	r1, r3
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f7ff feaa 	bl	80020b8 <move_window>
 8002364:	4603      	mov	r3, r0
 8002366:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002368:	7ffb      	ldrb	r3, [r7, #31]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d17a      	bne.n	8002464 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <put_fat+0xf0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e00e      	b.n	80023ae <put_fat+0x10e>
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b25b      	sxtb	r3, r3
 8002396:	f023 030f 	bic.w	r3, r3, #15
 800239a:	b25a      	sxtb	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	b25b      	sxtb	r3, r3
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	b25b      	sxtb	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b25b      	sxtb	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	70da      	strb	r2, [r3, #3]
			break;
 80023b8:	e059      	b.n	800246e <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	4413      	add	r3, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff fe76 	bl	80020b8 <move_window>
 80023cc:	4603      	mov	r3, r0
 80023ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80023d0:	7ffb      	ldrb	r3, [r7, #31]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d148      	bne.n	8002468 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80023e4:	4413      	add	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	b292      	uxth	r2, r2
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fc2a 	bl	8001c46 <st_word>
			fs->wflag = 1;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	70da      	strb	r2, [r3, #3]
			break;
 80023f8:	e039      	b.n	800246e <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	09db      	lsrs	r3, r3, #7
 8002402:	4413      	add	r3, r2
 8002404:	4619      	mov	r1, r3
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f7ff fe56 	bl	80020b8 <move_window>
 800240c:	4603      	mov	r3, r0
 800240e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002410:	7ffb      	ldrb	r3, [r7, #31]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d12a      	bne.n	800246c <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800242a:	4413      	add	r3, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fbe7 	bl	8001c00 <ld_dword>
 8002432:	4603      	mov	r3, r0
 8002434:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002438:	4323      	orrs	r3, r4
 800243a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800244a:	4413      	add	r3, r2
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fc14 	bl	8001c7c <st_dword>
			fs->wflag = 1;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	70da      	strb	r2, [r3, #3]
			break;
 800245a:	e008      	b.n	800246e <put_fat+0x1ce>
		}
	}
 800245c:	bf00      	nop
 800245e:	e006      	b.n	800246e <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002460:	bf00      	nop
 8002462:	e004      	b.n	800246e <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002464:	bf00      	nop
 8002466:	e002      	b.n	800246e <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002468:	bf00      	nop
 800246a:	e000      	b.n	800246e <put_fat+0x1ce>
			if (res != FR_OK) break;
 800246c:	bf00      	nop
	return res;
 800246e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3724      	adds	r7, #36	; 0x24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd90      	pop	{r4, r7, pc}

08002478 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d904      	bls.n	800249e <remove_chain+0x26>
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	429a      	cmp	r2, r3
 800249c:	d301      	bcc.n	80024a2 <remove_chain+0x2a>
 800249e:	2302      	movs	r3, #2
 80024a0:	e04b      	b.n	800253a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	69b8      	ldr	r0, [r7, #24]
 80024b0:	f7ff fef6 	bl	80022a0 <put_fat>
 80024b4:	4603      	mov	r3, r0
 80024b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80024b8:	7ffb      	ldrb	r3, [r7, #31]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <remove_chain+0x4a>
 80024be:	7ffb      	ldrb	r3, [r7, #31]
 80024c0:	e03b      	b.n	800253a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff fe43 	bl	8002150 <get_fat>
 80024ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d031      	beq.n	8002536 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <remove_chain+0x64>
 80024d8:	2302      	movs	r3, #2
 80024da:	e02e      	b.n	800253a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e2:	d101      	bne.n	80024e8 <remove_chain+0x70>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e028      	b.n	800253a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80024e8:	2200      	movs	r2, #0
 80024ea:	68b9      	ldr	r1, [r7, #8]
 80024ec:	69b8      	ldr	r0, [r7, #24]
 80024ee:	f7ff fed7 	bl	80022a0 <put_fat>
 80024f2:	4603      	mov	r3, r0
 80024f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80024f6:	7ffb      	ldrb	r3, [r7, #31]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <remove_chain+0x88>
 80024fc:	7ffb      	ldrb	r3, [r7, #31]
 80024fe:	e01c      	b.n	800253a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	3b02      	subs	r3, #2
 800250a:	429a      	cmp	r2, r3
 800250c:	d20b      	bcs.n	8002526 <remove_chain+0xae>
			fs->free_clst++;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	791b      	ldrb	r3, [r3, #4]
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	b2da      	uxtb	r2, r3
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	429a      	cmp	r2, r3
 8002532:	d3c6      	bcc.n	80024c2 <remove_chain+0x4a>
 8002534:	e000      	b.n	8002538 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002536:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b088      	sub	sp, #32
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10d      	bne.n	8002574 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <create_chain+0x2c>
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	429a      	cmp	r2, r3
 800256c:	d31b      	bcc.n	80025a6 <create_chain+0x64>
 800256e:	2301      	movs	r3, #1
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	e018      	b.n	80025a6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002574:	6839      	ldr	r1, [r7, #0]
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff fdea 	bl	8002150 <get_fat>
 800257c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d801      	bhi.n	8002588 <create_chain+0x46>
 8002584:	2301      	movs	r3, #1
 8002586:	e070      	b.n	800266a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d101      	bne.n	8002594 <create_chain+0x52>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	e06a      	b.n	800266a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	429a      	cmp	r2, r3
 800259c:	d201      	bcs.n	80025a2 <create_chain+0x60>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	e063      	b.n	800266a <create_chain+0x128>
		scl = clst;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d307      	bcc.n	80025ca <create_chain+0x88>
				ncl = 2;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d901      	bls.n	80025ca <create_chain+0x88>
 80025c6:	2300      	movs	r3, #0
 80025c8:	e04f      	b.n	800266a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80025ca:	69f9      	ldr	r1, [r7, #28]
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff fdbf 	bl	8002150 <get_fat>
 80025d2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00e      	beq.n	80025f8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d003      	beq.n	80025e8 <create_chain+0xa6>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e6:	d101      	bne.n	80025ec <create_chain+0xaa>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	e03e      	b.n	800266a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1da      	bne.n	80025aa <create_chain+0x68>
 80025f4:	2300      	movs	r3, #0
 80025f6:	e038      	b.n	800266a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80025f8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80025fa:	f04f 32ff 	mov.w	r2, #4294967295
 80025fe:	69f9      	ldr	r1, [r7, #28]
 8002600:	6938      	ldr	r0, [r7, #16]
 8002602:	f7ff fe4d 	bl	80022a0 <put_fat>
 8002606:	4603      	mov	r3, r0
 8002608:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800260a:	7dfb      	ldrb	r3, [r7, #23]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <create_chain+0xe2>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	6938      	ldr	r0, [r7, #16]
 800261c:	f7ff fe40 	bl	80022a0 <put_fat>
 8002620:	4603      	mov	r3, r0
 8002622:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d116      	bne.n	8002658 <create_chain+0x116>
		fs->last_clst = ncl;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	3b02      	subs	r3, #2
 800263a:	429a      	cmp	r2, r3
 800263c:	d804      	bhi.n	8002648 <create_chain+0x106>
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	1e5a      	subs	r2, r3, #1
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	791b      	ldrb	r3, [r3, #4]
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	711a      	strb	r2, [r3, #4]
 8002656:	e007      	b.n	8002668 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d102      	bne.n	8002664 <create_chain+0x122>
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	e000      	b.n	8002666 <create_chain+0x124>
 8002664:	2301      	movs	r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002668:	69fb      	ldr	r3, [r7, #28]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8002672:	b480      	push	{r7}
 8002674:	b087      	sub	sp, #28
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	3304      	adds	r3, #4
 8002688:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	0a5b      	lsrs	r3, r3, #9
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	8952      	ldrh	r2, [r2, #10]
 8002692:	fbb3 f3f2 	udiv	r3, r3, r2
 8002696:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1d1a      	adds	r2, r3, #4
 800269c:	613a      	str	r2, [r7, #16]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <clmt_clust+0x3a>
 80026a8:	2300      	movs	r3, #0
 80026aa:	e010      	b.n	80026ce <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d307      	bcc.n	80026c4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	3304      	adds	r3, #4
 80026c0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80026c2:	e7e9      	b.n	8002698 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80026c4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	4413      	add	r3, r2
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026f0:	d204      	bcs.n	80026fc <dir_sdi+0x22>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <dir_sdi+0x26>
		return FR_INT_ERR;
 80026fc:	2302      	movs	r3, #2
 80026fe:	e063      	b.n	80027c8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <dir_sdi+0x46>
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d902      	bls.n	8002720 <dir_sdi+0x46>
		clst = fs->dirbase;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10c      	bne.n	8002740 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	8912      	ldrh	r2, [r2, #8]
 800272e:	4293      	cmp	r3, r2
 8002730:	d301      	bcc.n	8002736 <dir_sdi+0x5c>
 8002732:	2302      	movs	r3, #2
 8002734:	e048      	b.n	80027c8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	61da      	str	r2, [r3, #28]
 800273e:	e029      	b.n	8002794 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	895b      	ldrh	r3, [r3, #10]
 8002744:	025b      	lsls	r3, r3, #9
 8002746:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002748:	e019      	b.n	800277e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6979      	ldr	r1, [r7, #20]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fcfe 	bl	8002150 <get_fat>
 8002754:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d101      	bne.n	8002762 <dir_sdi+0x88>
 800275e:	2301      	movs	r3, #1
 8002760:	e032      	b.n	80027c8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d904      	bls.n	8002772 <dir_sdi+0x98>
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	429a      	cmp	r2, r3
 8002770:	d301      	bcc.n	8002776 <dir_sdi+0x9c>
 8002772:	2302      	movs	r3, #2
 8002774:	e028      	b.n	80027c8 <dir_sdi+0xee>
			ofs -= csz;
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	429a      	cmp	r2, r3
 8002784:	d2e1      	bcs.n	800274a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8002786:	6979      	ldr	r1, [r7, #20]
 8002788:	6938      	ldr	r0, [r7, #16]
 800278a:	f7ff fcc2 	bl	8002112 <clust2sect>
 800278e:	4602      	mov	r2, r0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <dir_sdi+0xcc>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e010      	b.n	80027c8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	0a5b      	lsrs	r3, r3, #9
 80027ae:	441a      	add	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c0:	441a      	add	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	3320      	adds	r3, #32
 80027e6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <dir_next+0x28>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027f6:	d301      	bcc.n	80027fc <dir_next+0x2c>
 80027f8:	2304      	movs	r3, #4
 80027fa:	e0aa      	b.n	8002952 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 8098 	bne.w	8002938 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	8912      	ldrh	r2, [r2, #8]
 8002822:	4293      	cmp	r3, r2
 8002824:	f0c0 8088 	bcc.w	8002938 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
 800282e:	2304      	movs	r3, #4
 8002830:	e08f      	b.n	8002952 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	0a5b      	lsrs	r3, r3, #9
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	8952      	ldrh	r2, [r2, #10]
 800283a:	3a01      	subs	r2, #1
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d17a      	bne.n	8002938 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f7ff fc80 	bl	8002150 <get_fat>
 8002850:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d801      	bhi.n	800285c <dir_next+0x8c>
 8002858:	2302      	movs	r3, #2
 800285a:	e07a      	b.n	8002952 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d101      	bne.n	8002868 <dir_next+0x98>
 8002864:	2301      	movs	r3, #1
 8002866:	e074      	b.n	8002952 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	429a      	cmp	r2, r3
 8002870:	d358      	bcc.n	8002924 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d104      	bne.n	8002882 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
 800287e:	2304      	movs	r3, #4
 8002880:	e067      	b.n	8002952 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4619      	mov	r1, r3
 800288a:	4610      	mov	r0, r2
 800288c:	f7ff fe59 	bl	8002542 <create_chain>
 8002890:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <dir_next+0xcc>
 8002898:	2307      	movs	r3, #7
 800289a:	e05a      	b.n	8002952 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <dir_next+0xd6>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e055      	b.n	8002952 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d101      	bne.n	80028b2 <dir_next+0xe2>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e04f      	b.n	8002952 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f7ff fbbc 	bl	8002030 <sync_window>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <dir_next+0xf2>
 80028be:	2301      	movs	r3, #1
 80028c0:	e047      	b.n	8002952 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3334      	adds	r3, #52	; 0x34
 80028c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fa22 	bl	8001d16 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	6979      	ldr	r1, [r7, #20]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f7ff fc1a 	bl	8002112 <clust2sect>
 80028de:	4602      	mov	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
 80028e4:	e012      	b.n	800290c <dir_next+0x13c>
						fs->wflag = 1;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff fb9f 	bl	8002030 <sync_window>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <dir_next+0x12c>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e02a      	b.n	8002952 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	3301      	adds	r3, #1
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	895b      	ldrh	r3, [r3, #10]
 8002910:	461a      	mov	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4293      	cmp	r3, r2
 8002916:	d3e6      	bcc.n	80028e6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad2      	subs	r2, r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800292a:	6979      	ldr	r1, [r7, #20]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f7ff fbf0 	bl	8002112 <clust2sect>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294a:	441a      	add	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800296a:	2100      	movs	r1, #0
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff feb4 	bl	80026da <dir_sdi>
 8002972:	4603      	mov	r3, r0
 8002974:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d12b      	bne.n	80029d4 <dir_alloc+0x7a>
		n = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	4619      	mov	r1, r3
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7ff fb96 	bl	80020b8 <move_window>
 800298c:	4603      	mov	r3, r0
 800298e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d11d      	bne.n	80029d2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2be5      	cmp	r3, #229	; 0xe5
 800299e:	d004      	beq.n	80029aa <dir_alloc+0x50>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d107      	bne.n	80029ba <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	3301      	adds	r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d102      	bne.n	80029be <dir_alloc+0x64>
 80029b8:	e00c      	b.n	80029d4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80029be:	2101      	movs	r1, #1
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff05 	bl	80027d0 <dir_next>
 80029c6:	4603      	mov	r3, r0
 80029c8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0d7      	beq.n	8002980 <dir_alloc+0x26>
 80029d0:	e000      	b.n	80029d4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80029d2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d101      	bne.n	80029de <dir_alloc+0x84>
 80029da:	2307      	movs	r3, #7
 80029dc:	75fb      	strb	r3, [r7, #23]
	return res;
 80029de:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	331a      	adds	r3, #26
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff f8ea 	bl	8001bd0 <ld_word>
 80029fc:	4603      	mov	r3, r0
 80029fe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d109      	bne.n	8002a1c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f8df 	bl	8001bd0 <ld_word>
 8002a12:	4603      	mov	r3, r0
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	331a      	adds	r3, #26
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	b292      	uxth	r2, r2
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff f902 	bl	8001c46 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d109      	bne.n	8002a5e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f103 0214 	add.w	r2, r3, #20
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	4619      	mov	r1, r3
 8002a58:	4610      	mov	r0, r2
 8002a5a:	f7ff f8f4 	bl	8001c46 <st_word>
	}
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	331a      	adds	r3, #26
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff f8aa 	bl	8001bd0 <ld_word>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <cmp_lfn+0x1e>
 8002a82:	2300      	movs	r3, #0
 8002a84:	e059      	b.n	8002b3a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a8e:	1e5a      	subs	r2, r3, #1
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	81fb      	strh	r3, [r7, #14]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	e033      	b.n	8002b0e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8002aa6:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <cmp_lfn+0xdc>)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f88b 	bl	8001bd0 <ld_word>
 8002aba:	4603      	mov	r3, r0
 8002abc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8002abe:	89fb      	ldrh	r3, [r7, #14]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01a      	beq.n	8002afa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2bfe      	cmp	r3, #254	; 0xfe
 8002ac8:	d812      	bhi.n	8002af0 <cmp_lfn+0x88>
 8002aca:	89bb      	ldrh	r3, [r7, #12]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f001 fe39 	bl	8004744 <ff_wtoupper>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	461c      	mov	r4, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	617a      	str	r2, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f001 fe2d 	bl	8004744 <ff_wtoupper>
 8002aea:	4603      	mov	r3, r0
 8002aec:	429c      	cmp	r4, r3
 8002aee:	d001      	beq.n	8002af4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8002af0:	2300      	movs	r3, #0
 8002af2:	e022      	b.n	8002b3a <cmp_lfn+0xd2>
			}
			wc = uc;
 8002af4:	89bb      	ldrh	r3, [r7, #12]
 8002af6:	81fb      	strh	r3, [r7, #14]
 8002af8:	e006      	b.n	8002b08 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8002afa:	89bb      	ldrh	r3, [r7, #12]
 8002afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d001      	beq.n	8002b08 <cmp_lfn+0xa0>
 8002b04:	2300      	movs	r3, #0
 8002b06:	e018      	b.n	8002b3a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b0c      	cmp	r3, #12
 8002b12:	d9c8      	bls.n	8002aa6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <cmp_lfn+0xd0>
 8002b20:	89fb      	ldrh	r3, [r7, #14]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <cmp_lfn+0xd0>
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <cmp_lfn+0xd0>
 8002b34:	2300      	movs	r3, #0
 8002b36:	e000      	b.n	8002b3a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8002b38:	2301      	movs	r3, #1
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}
 8002b42:	bf00      	nop
 8002b44:	080053ec 	.word	0x080053ec

08002b48 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	460b      	mov	r3, r1
 8002b58:	71fb      	strb	r3, [r7, #7]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	330d      	adds	r3, #13
 8002b62:	79ba      	ldrb	r2, [r7, #6]
 8002b64:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	330b      	adds	r3, #11
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	330c      	adds	r3, #12
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	331a      	adds	r3, #26
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff f862 	bl	8001c46 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	1e5a      	subs	r2, r3, #1
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	82fb      	strh	r3, [r7, #22]
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8002b9a:	8afb      	ldrh	r3, [r7, #22]
 8002b9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d007      	beq.n	8002bb4 <put_lfn+0x6c>
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	61fa      	str	r2, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8002bb4:	4a17      	ldr	r2, [pc, #92]	; (8002c14 <put_lfn+0xcc>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4413      	add	r3, r2
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	8afa      	ldrh	r2, [r7, #22]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff f83d 	bl	8001c46 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8002bcc:	8afb      	ldrh	r3, [r7, #22]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d102      	bne.n	8002bd8 <put_lfn+0x90>
 8002bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bd6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d9da      	bls.n	8002b9a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8002be4:	8afb      	ldrh	r3, [r7, #22]
 8002be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d006      	beq.n	8002bfc <put_lfn+0xb4>
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d103      	bne.n	8002c04 <put_lfn+0xbc>
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c02:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	79fa      	ldrb	r2, [r7, #7]
 8002c08:	701a      	strb	r2, [r3, #0]
}
 8002c0a:	bf00      	nop
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	080053ec 	.word	0x080053ec

08002c18 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	; 0x30
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8002c26:	220b      	movs	r2, #11
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff f852 	bl	8001cd4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d92b      	bls.n	8002c8e <gen_numname+0x76>
		sr = seq;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8002c3a:	e022      	b.n	8002c82 <gen_numname+0x6a>
			wc = *lfn++;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	1c9a      	adds	r2, r3, #2
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8002c46:	2300      	movs	r3, #0
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c4a:	e017      	b.n	8002c7c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005a      	lsls	r2, r3, #1
 8002c50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8002c5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <gen_numname+0x5e>
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8002c70:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8002c74:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	3301      	adds	r3, #1
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	2b0f      	cmp	r3, #15
 8002c80:	d9e4      	bls.n	8002c4c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1d8      	bne.n	8002c3c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8002c8e:	2307      	movs	r3, #7
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	3330      	adds	r3, #48	; 0x30
 8002c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8002ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ca6:	2b39      	cmp	r3, #57	; 0x39
 8002ca8:	d904      	bls.n	8002cb4 <gen_numname+0x9c>
 8002caa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cae:	3307      	adds	r3, #7
 8002cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	1e5a      	subs	r2, r3, #1
 8002cb8:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cba:	3330      	adds	r3, #48	; 0x30
 8002cbc:	443b      	add	r3, r7
 8002cbe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002cc2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	603b      	str	r3, [r7, #0]
	} while (seq);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1df      	bne.n	8002c92 <gen_numname+0x7a>
	ns[i] = '~';
 8002cd2:	f107 0214 	add.w	r2, r7, #20
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	4413      	add	r3, r2
 8002cda:	227e      	movs	r2, #126	; 0x7e
 8002cdc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	e002      	b.n	8002cea <gen_numname+0xd2>
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d205      	bcs.n	8002cfe <gen_numname+0xe6>
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	4413      	add	r3, r2
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d1f2      	bne.n	8002ce4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	2b07      	cmp	r3, #7
 8002d02:	d807      	bhi.n	8002d14 <gen_numname+0xfc>
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d0a:	3330      	adds	r3, #48	; 0x30
 8002d0c:	443b      	add	r3, r7
 8002d0e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8002d12:	e000      	b.n	8002d16 <gen_numname+0xfe>
 8002d14:	2120      	movs	r1, #32
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	627a      	str	r2, [r7, #36]	; 0x24
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	460a      	mov	r2, r1
 8002d22:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	2b07      	cmp	r3, #7
 8002d28:	d9e9      	bls.n	8002cfe <gen_numname+0xe6>
}
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	3730      	adds	r7, #48	; 0x30
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8002d40:	230b      	movs	r3, #11
 8002d42:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	0852      	lsrs	r2, r2, #1
 8002d4a:	01db      	lsls	r3, r3, #7
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	1c59      	adds	r1, r3, #1
 8002d54:	6079      	str	r1, [r7, #4]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ed      	bne.n	8002d44 <sum_sfn+0x10>
	return sum;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002d84:	2100      	movs	r1, #0
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff fca7 	bl	80026da <dir_sdi>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <dir_find+0x24>
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	e0a9      	b.n	8002eee <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8002d9a:	23ff      	movs	r3, #255	; 0xff
 8002d9c:	753b      	strb	r3, [r7, #20]
 8002d9e:	7d3b      	ldrb	r3, [r7, #20]
 8002da0:	757b      	strb	r3, [r7, #21]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	4619      	mov	r1, r3
 8002db0:	6938      	ldr	r0, [r7, #16]
 8002db2:	f7ff f981 	bl	80020b8 <move_window>
 8002db6:	4603      	mov	r3, r0
 8002db8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 8090 	bne.w	8002ee2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002dca:	7dbb      	ldrb	r3, [r7, #22]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <dir_find+0x60>
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	75fb      	strb	r3, [r7, #23]
 8002dd4:	e08a      	b.n	8002eec <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	330b      	adds	r3, #11
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8002dea:	7dbb      	ldrb	r3, [r7, #22]
 8002dec:	2be5      	cmp	r3, #229	; 0xe5
 8002dee:	d007      	beq.n	8002e00 <dir_find+0x8a>
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <dir_find+0x98>
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	2b0f      	cmp	r3, #15
 8002dfe:	d006      	beq.n	8002e0e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8002e00:	23ff      	movs	r3, #255	; 0xff
 8002e02:	757b      	strb	r3, [r7, #21]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e0c:	e05e      	b.n	8002ecc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	2b0f      	cmp	r3, #15
 8002e12:	d136      	bne.n	8002e82 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d154      	bne.n	8002ecc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8002e22:	7dbb      	ldrb	r3, [r7, #22]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	7b5b      	ldrb	r3, [r3, #13]
 8002e32:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8002e34:	7dbb      	ldrb	r3, [r7, #22]
 8002e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e3a:	75bb      	strb	r3, [r7, #22]
 8002e3c:	7dbb      	ldrb	r3, [r7, #22]
 8002e3e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8002e48:	7dba      	ldrb	r2, [r7, #22]
 8002e4a:	7d7b      	ldrb	r3, [r7, #21]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d115      	bne.n	8002e7c <dir_find+0x106>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	330d      	adds	r3, #13
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	7d3a      	ldrb	r2, [r7, #20]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d10e      	bne.n	8002e7c <dir_find+0x106>
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f7ff fdfd 	bl	8002a68 <cmp_lfn>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <dir_find+0x106>
 8002e74:	7d7b      	ldrb	r3, [r7, #21]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	e000      	b.n	8002e7e <dir_find+0x108>
 8002e7c:	23ff      	movs	r3, #255	; 0xff
 8002e7e:	757b      	strb	r3, [r7, #21]
 8002e80:	e024      	b.n	8002ecc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8002e82:	7d7b      	ldrb	r3, [r7, #21]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d109      	bne.n	8002e9c <dir_find+0x126>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff51 	bl	8002d34 <sum_sfn>
 8002e92:	4603      	mov	r3, r0
 8002e94:	461a      	mov	r2, r3
 8002e96:	7d3b      	ldrb	r3, [r7, #20]
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d024      	beq.n	8002ee6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <dir_find+0x14a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a18      	ldr	r0, [r3, #32]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3324      	adds	r3, #36	; 0x24
 8002eb2:	220b      	movs	r2, #11
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f7fe ff49 	bl	8001d4c <mem_cmp>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d014      	beq.n	8002eea <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8002ec0:	23ff      	movs	r3, #255	; 0xff
 8002ec2:	757b      	strb	r3, [r7, #21]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8002ecc:	2100      	movs	r1, #0
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff fc7e 	bl	80027d0 <dir_next>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f43f af65 	beq.w	8002daa <dir_find+0x34>
 8002ee0:	e004      	b.n	8002eec <dir_find+0x176>
		if (res != FR_OK) break;
 8002ee2:	bf00      	nop
 8002ee4:	e002      	b.n	8002eec <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8002eea:	bf00      	nop

	return res;
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08c      	sub	sp, #48	; 0x30
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002f0c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <dir_register+0x20>
 8002f14:	2306      	movs	r3, #6
 8002f16:	e0e0      	b.n	80030da <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	e002      	b.n	8002f24 <dir_register+0x2c>
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	3301      	adds	r3, #1
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	4413      	add	r3, r2
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f4      	bne.n	8002f1e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8002f3a:	f107 030c 	add.w	r3, r7, #12
 8002f3e:	220c      	movs	r2, #12
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fec7 	bl	8001cd4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d032      	beq.n	8002fb6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2240      	movs	r2, #64	; 0x40
 8002f54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8002f58:	2301      	movs	r3, #1
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f5c:	e016      	b.n	8002f8c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	f107 010c 	add.w	r1, r7, #12
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	f7ff fe53 	bl	8002c18 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff feff 	bl	8002d76 <dir_find>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8002f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	3301      	adds	r3, #1
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	2b63      	cmp	r3, #99	; 0x63
 8002f90:	d9e5      	bls.n	8002f5e <dir_register+0x66>
 8002f92:	e000      	b.n	8002f96 <dir_register+0x9e>
			if (res != FR_OK) break;
 8002f94:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	2b64      	cmp	r3, #100	; 0x64
 8002f9a:	d101      	bne.n	8002fa0 <dir_register+0xa8>
 8002f9c:	2307      	movs	r3, #7
 8002f9e:	e09c      	b.n	80030da <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8002fa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d002      	beq.n	8002fae <dir_register+0xb6>
 8002fa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fac:	e095      	b.n	80030da <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8002fae:	7dfa      	ldrb	r2, [r7, #23]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <dir_register+0xd8>
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	4a47      	ldr	r2, [pc, #284]	; (80030e4 <dir_register+0x1ec>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	3301      	adds	r3, #1
 8002fce:	e000      	b.n	8002fd2 <dir_register+0xda>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8002fd4:	6a39      	ldr	r1, [r7, #32]
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fcbf 	bl	800295a <dir_alloc>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8002fe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d148      	bne.n	800307c <dir_register+0x184>
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	623b      	str	r3, [r7, #32]
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d042      	beq.n	800307c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	015b      	lsls	r3, r3, #5
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff fb69 	bl	80026da <dir_sdi>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800300e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003012:	2b00      	cmp	r3, #0
 8003014:	d132      	bne.n	800307c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3324      	adds	r3, #36	; 0x24
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fe8a 	bl	8002d34 <sum_sfn>
 8003020:	4603      	mov	r3, r0
 8003022:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	4619      	mov	r1, r3
 800302a:	69f8      	ldr	r0, [r7, #28]
 800302c:	f7ff f844 	bl	80020b8 <move_window>
 8003030:	4603      	mov	r3, r0
 8003032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8003036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800303a:	2b00      	cmp	r3, #0
 800303c:	d11d      	bne.n	800307a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	68d8      	ldr	r0, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a19      	ldr	r1, [r3, #32]
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	7efb      	ldrb	r3, [r7, #27]
 800304c:	f7ff fd7c 	bl	8002b48 <put_lfn>
				fs->wflag = 1;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2201      	movs	r2, #1
 8003054:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8003056:	2100      	movs	r1, #0
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff fbb9 	bl	80027d0 <dir_next>
 800305e:	4603      	mov	r3, r0
 8003060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8003064:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003068:	2b00      	cmp	r3, #0
 800306a:	d107      	bne.n	800307c <dir_register+0x184>
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	3b01      	subs	r3, #1
 8003070:	623b      	str	r3, [r7, #32]
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1d5      	bne.n	8003024 <dir_register+0x12c>
 8003078:	e000      	b.n	800307c <dir_register+0x184>
				if (res != FR_OK) break;
 800307a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800307c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003080:	2b00      	cmp	r3, #0
 8003082:	d128      	bne.n	80030d6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	4619      	mov	r1, r3
 800308a:	69f8      	ldr	r0, [r7, #28]
 800308c:	f7ff f814 	bl	80020b8 <move_window>
 8003090:	4603      	mov	r3, r0
 8003092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11b      	bne.n	80030d6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	2220      	movs	r2, #32
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fe35 	bl	8001d16 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a18      	ldr	r0, [r3, #32]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3324      	adds	r3, #36	; 0x24
 80030b4:	220b      	movs	r2, #11
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7fe fe0c 	bl	8001cd4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	330c      	adds	r3, #12
 80030c8:	f002 0218 	and.w	r2, r2, #24
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2201      	movs	r2, #1
 80030d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80030d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3730      	adds	r7, #48	; 0x30
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	4ec4ec4f 	.word	0x4ec4ec4f

080030e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	61ba      	str	r2, [r7, #24]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8003116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003118:	2b1f      	cmp	r3, #31
 800311a:	d940      	bls.n	800319e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800311c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800311e:	2b2f      	cmp	r3, #47	; 0x2f
 8003120:	d006      	beq.n	8003130 <create_name+0x48>
 8003122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003124:	2b5c      	cmp	r3, #92	; 0x5c
 8003126:	d110      	bne.n	800314a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003128:	e002      	b.n	8003130 <create_name+0x48>
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	3301      	adds	r3, #1
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4413      	add	r3, r2
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b2f      	cmp	r3, #47	; 0x2f
 800313a:	d0f6      	beq.n	800312a <create_name+0x42>
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	4413      	add	r3, r2
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b5c      	cmp	r3, #92	; 0x5c
 8003146:	d0f0      	beq.n	800312a <create_name+0x42>
			break;
 8003148:	e02a      	b.n	80031a0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2bfe      	cmp	r3, #254	; 0xfe
 800314e:	d901      	bls.n	8003154 <create_name+0x6c>
 8003150:	2306      	movs	r3, #6
 8003152:	e17d      	b.n	8003450 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8003154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003156:	b2db      	uxtb	r3, r3
 8003158:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800315a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f001 fab4 	bl	80046cc <ff_convert>
 8003164:	4603      	mov	r3, r0
 8003166:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <create_name+0x8a>
 800316e:	2306      	movs	r3, #6
 8003170:	e16e      	b.n	8003450 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003174:	2b7f      	cmp	r3, #127	; 0x7f
 8003176:	d809      	bhi.n	800318c <create_name+0xa4>
 8003178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800317a:	4619      	mov	r1, r3
 800317c:	488d      	ldr	r0, [pc, #564]	; (80033b4 <create_name+0x2cc>)
 800317e:	f7fe fe0c 	bl	8001d9a <chk_chr>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <create_name+0xa4>
 8003188:	2306      	movs	r3, #6
 800318a:	e161      	b.n	8003450 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	617a      	str	r2, [r7, #20]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800319a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800319c:	e7b4      	b.n	8003108 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800319e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	441a      	add	r2, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80031aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031ac:	2b1f      	cmp	r3, #31
 80031ae:	d801      	bhi.n	80031b4 <create_name+0xcc>
 80031b0:	2304      	movs	r3, #4
 80031b2:	e000      	b.n	80031b6 <create_name+0xce>
 80031b4:	2300      	movs	r3, #0
 80031b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80031ba:	e011      	b.n	80031e0 <create_name+0xf8>
		w = lfn[di - 1];
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80031c2:	3b01      	subs	r3, #1
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80031ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d002      	beq.n	80031da <create_name+0xf2>
 80031d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031d6:	2b2e      	cmp	r3, #46	; 0x2e
 80031d8:	d106      	bne.n	80031e8 <create_name+0x100>
		di--;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3b01      	subs	r3, #1
 80031de:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1ea      	bne.n	80031bc <create_name+0xd4>
 80031e6:	e000      	b.n	80031ea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80031e8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4413      	add	r3, r2
 80031f2:	2200      	movs	r2, #0
 80031f4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <create_name+0x118>
 80031fc:	2306      	movs	r3, #6
 80031fe:	e127      	b.n	8003450 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3324      	adds	r3, #36	; 0x24
 8003204:	220b      	movs	r2, #11
 8003206:	2120      	movs	r1, #32
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe fd84 	bl	8001d16 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	e002      	b.n	800321a <create_name+0x132>
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	3301      	adds	r3, #1
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	2b20      	cmp	r3, #32
 8003226:	d0f5      	beq.n	8003214 <create_name+0x12c>
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	2b2e      	cmp	r3, #46	; 0x2e
 8003234:	d0ee      	beq.n	8003214 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <create_name+0x168>
 800323c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003240:	f043 0303 	orr.w	r3, r3, #3
 8003244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003248:	e002      	b.n	8003250 <create_name+0x168>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3b01      	subs	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <create_name+0x182>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800325c:	3b01      	subs	r3, #1
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	2b2e      	cmp	r3, #46	; 0x2e
 8003268:	d1ef      	bne.n	800324a <create_name+0x162>

	i = b = 0; ni = 8;
 800326a:	2300      	movs	r3, #0
 800326c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003270:	2300      	movs	r3, #0
 8003272:	623b      	str	r3, [r7, #32]
 8003274:	2308      	movs	r3, #8
 8003276:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	61ba      	str	r2, [r7, #24]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8003288:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8090 	beq.w	80033b0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003292:	2b20      	cmp	r3, #32
 8003294:	d006      	beq.n	80032a4 <create_name+0x1bc>
 8003296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003298:	2b2e      	cmp	r3, #46	; 0x2e
 800329a:	d10a      	bne.n	80032b2 <create_name+0x1ca>
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d006      	beq.n	80032b2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80032a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a8:	f043 0303 	orr.w	r3, r3, #3
 80032ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80032b0:	e07d      	b.n	80033ae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80032b2:	6a3a      	ldr	r2, [r7, #32]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d203      	bcs.n	80032c2 <create_name+0x1da>
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d123      	bne.n	800330a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	2b0b      	cmp	r3, #11
 80032c6:	d106      	bne.n	80032d6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80032c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032cc:	f043 0303 	orr.w	r3, r3, #3
 80032d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80032d4:	e075      	b.n	80033c2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d005      	beq.n	80032ea <create_name+0x202>
 80032de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032e2:	f043 0303 	orr.w	r3, r3, #3
 80032e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d866      	bhi.n	80033c0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	2308      	movs	r3, #8
 80032f8:	623b      	str	r3, [r7, #32]
 80032fa:	230b      	movs	r3, #11
 80032fc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80032fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003308:	e051      	b.n	80033ae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800330a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800330c:	2b7f      	cmp	r3, #127	; 0x7f
 800330e:	d914      	bls.n	800333a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f001 f9d9 	bl	80046cc <ff_convert>
 800331a:	4603      	mov	r3, r0
 800331c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800331e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <create_name+0x246>
 8003324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003326:	3b80      	subs	r3, #128	; 0x80
 8003328:	4a23      	ldr	r2, [pc, #140]	; (80033b8 <create_name+0x2d0>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800332e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003332:	f043 0302 	orr.w	r3, r3, #2
 8003336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800333a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <create_name+0x268>
 8003340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003342:	4619      	mov	r1, r3
 8003344:	481d      	ldr	r0, [pc, #116]	; (80033bc <create_name+0x2d4>)
 8003346:	f7fe fd28 	bl	8001d9a <chk_chr>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003350:	235f      	movs	r3, #95	; 0x5f
 8003352:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003358:	f043 0303 	orr.w	r3, r3, #3
 800335c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003360:	e01b      	b.n	800339a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8003362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d909      	bls.n	800337c <create_name+0x294>
 8003368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800336a:	2b5a      	cmp	r3, #90	; 0x5a
 800336c:	d806      	bhi.n	800337c <create_name+0x294>
					b |= 2;
 800336e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003372:	f043 0302 	orr.w	r3, r3, #2
 8003376:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800337a:	e00e      	b.n	800339a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800337c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800337e:	2b60      	cmp	r3, #96	; 0x60
 8003380:	d90b      	bls.n	800339a <create_name+0x2b2>
 8003382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003384:	2b7a      	cmp	r3, #122	; 0x7a
 8003386:	d808      	bhi.n	800339a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8003388:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003396:	3b20      	subs	r3, #32
 8003398:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	623a      	str	r2, [r7, #32]
 80033a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033a2:	b2d1      	uxtb	r1, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	460a      	mov	r2, r1
 80033aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80033ae:	e763      	b.n	8003278 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80033b0:	bf00      	nop
 80033b2:	e006      	b.n	80033c2 <create_name+0x2da>
 80033b4:	08005314 	.word	0x08005314
 80033b8:	0800536c 	.word	0x0800536c
 80033bc:	08005320 	.word	0x08005320
			if (si > di) break;			/* No extension */
 80033c0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033c8:	2be5      	cmp	r3, #229	; 0xe5
 80033ca:	d103      	bne.n	80033d4 <create_name+0x2ec>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2205      	movs	r2, #5
 80033d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d104      	bne.n	80033e4 <create_name+0x2fc>
 80033da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80033e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d005      	beq.n	80033fc <create_name+0x314>
 80033f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d105      	bne.n	8003408 <create_name+0x320>
 80033fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d117      	bne.n	8003444 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8003414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <create_name+0x344>
 8003420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003424:	f043 0310 	orr.w	r3, r3, #16
 8003428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800342c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b04      	cmp	r3, #4
 8003436:	d105      	bne.n	8003444 <create_name+0x35c>
 8003438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800344a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800344e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8003450:	4618      	mov	r0, r3
 8003452:	3728      	adds	r7, #40	; 0x28
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800346c:	e002      	b.n	8003474 <follow_path+0x1c>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	3301      	adds	r3, #1
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b2f      	cmp	r3, #47	; 0x2f
 800347a:	d0f8      	beq.n	800346e <follow_path+0x16>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b5c      	cmp	r3, #92	; 0x5c
 8003482:	d0f4      	beq.n	800346e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b1f      	cmp	r3, #31
 8003490:	d80a      	bhi.n	80034a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800349a:	2100      	movs	r1, #0
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff f91c 	bl	80026da <dir_sdi>
 80034a2:	4603      	mov	r3, r0
 80034a4:	75fb      	strb	r3, [r7, #23]
 80034a6:	e043      	b.n	8003530 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80034a8:	463b      	mov	r3, r7
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fe1b 	bl	80030e8 <create_name>
 80034b2:	4603      	mov	r3, r0
 80034b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d134      	bne.n	8003526 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff fc5a 	bl	8002d76 <dir_find>
 80034c2:	4603      	mov	r3, r0
 80034c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80034cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d127      	bne.n	800352a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80034da:	7afb      	ldrb	r3, [r7, #11]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d122      	bne.n	800352a <follow_path+0xd2>
 80034e4:	2305      	movs	r3, #5
 80034e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80034e8:	e01f      	b.n	800352a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80034ea:	7afb      	ldrb	r3, [r7, #11]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d11c      	bne.n	800352e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	799b      	ldrb	r3, [r3, #6]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8003500:	2305      	movs	r3, #5
 8003502:	75fb      	strb	r3, [r7, #23]
 8003504:	e014      	b.n	8003530 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003514:	4413      	add	r3, r2
 8003516:	4619      	mov	r1, r3
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7ff fa65 	bl	80029e8 <ld_clust>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003524:	e7c0      	b.n	80034a8 <follow_path+0x50>
			if (res != FR_OK) break;
 8003526:	bf00      	nop
 8003528:	e002      	b.n	8003530 <follow_path+0xd8>
				break;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800352e:	bf00      	nop
			}
		}
	}

	return res;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800353a:	b480      	push	{r7}
 800353c:	b087      	sub	sp, #28
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003542:	f04f 33ff 	mov.w	r3, #4294967295
 8003546:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d031      	beq.n	80035b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e002      	b.n	800355e <get_ldnumber+0x24>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3301      	adds	r3, #1
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b1f      	cmp	r3, #31
 8003564:	d903      	bls.n	800356e <get_ldnumber+0x34>
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b3a      	cmp	r3, #58	; 0x3a
 800356c:	d1f4      	bne.n	8003558 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b3a      	cmp	r3, #58	; 0x3a
 8003574:	d11c      	bne.n	80035b0 <get_ldnumber+0x76>
			tp = *path;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	60fa      	str	r2, [r7, #12]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	3b30      	subs	r3, #48	; 0x30
 8003586:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b09      	cmp	r3, #9
 800358c:	d80e      	bhi.n	80035ac <get_ldnumber+0x72>
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	429a      	cmp	r2, r3
 8003594:	d10a      	bne.n	80035ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d107      	bne.n	80035ac <get_ldnumber+0x72>
					vol = (int)i;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	3301      	adds	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	e002      	b.n	80035b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80035b0:	2300      	movs	r3, #0
 80035b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80035b4:	693b      	ldr	r3, [r7, #16]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	70da      	strb	r2, [r3, #3]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f04f 32ff 	mov.w	r2, #4294967295
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80035dc:	6839      	ldr	r1, [r7, #0]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe fd6a 	bl	80020b8 <move_window>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <check_fs+0x2a>
 80035ea:	2304      	movs	r3, #4
 80035ec:	e038      	b.n	8003660 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3334      	adds	r3, #52	; 0x34
 80035f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe faea 	bl	8001bd0 <ld_word>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <check_fs+0x48>
 8003608:	2303      	movs	r3, #3
 800360a:	e029      	b.n	8003660 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003612:	2be9      	cmp	r3, #233	; 0xe9
 8003614:	d009      	beq.n	800362a <check_fs+0x66>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800361c:	2beb      	cmp	r3, #235	; 0xeb
 800361e:	d11e      	bne.n	800365e <check_fs+0x9a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003626:	2b90      	cmp	r3, #144	; 0x90
 8003628:	d119      	bne.n	800365e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3334      	adds	r3, #52	; 0x34
 800362e:	3336      	adds	r3, #54	; 0x36
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fae5 	bl	8001c00 <ld_dword>
 8003636:	4603      	mov	r3, r0
 8003638:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800363c:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <check_fs+0xa4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d101      	bne.n	8003646 <check_fs+0x82>
 8003642:	2300      	movs	r3, #0
 8003644:	e00c      	b.n	8003660 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3334      	adds	r3, #52	; 0x34
 800364a:	3352      	adds	r3, #82	; 0x52
 800364c:	4618      	mov	r0, r3
 800364e:	f7fe fad7 	bl	8001c00 <ld_dword>
 8003652:	4603      	mov	r3, r0
 8003654:	4a05      	ldr	r2, [pc, #20]	; (800366c <check_fs+0xa8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d101      	bne.n	800365e <check_fs+0x9a>
 800365a:	2300      	movs	r3, #0
 800365c:	e000      	b.n	8003660 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800365e:	2302      	movs	r3, #2
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	00544146 	.word	0x00544146
 800366c:	33544146 	.word	0x33544146

08003670 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b096      	sub	sp, #88	; 0x58
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff ff58 	bl	800353a <get_ldnumber>
 800368a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	2b00      	cmp	r3, #0
 8003690:	da01      	bge.n	8003696 <find_volume+0x26>
 8003692:	230b      	movs	r3, #11
 8003694:	e230      	b.n	8003af8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003696:	4aa1      	ldr	r2, [pc, #644]	; (800391c <find_volume+0x2ac>)
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <find_volume+0x3a>
 80036a6:	230c      	movs	r3, #12
 80036a8:	e226      	b.n	8003af8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80036b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01a      	beq.n	80036f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80036c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c2:	785b      	ldrb	r3, [r3, #1]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe fa03 	bl	8001ad0 <disk_status>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80036d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10c      	bne.n	80036f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <find_volume+0x82>
 80036e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80036ee:	230a      	movs	r3, #10
 80036f0:	e202      	b.n	8003af8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80036f2:	2300      	movs	r3, #0
 80036f4:	e200      	b.n	8003af8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80036fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	785b      	ldrb	r3, [r3, #1]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe f9fb 	bl	8001b04 <disk_initialize>
 800370e:	4603      	mov	r3, r0
 8003710:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003714:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003720:	2303      	movs	r3, #3
 8003722:	e1e9      	b.n	8003af8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <find_volume+0xca>
 800372a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8003736:	230a      	movs	r3, #10
 8003738:	e1de      	b.n	8003af8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800373e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003740:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003742:	f7ff ff3f 	bl	80035c4 <check_fs>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800374c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003750:	2b02      	cmp	r3, #2
 8003752:	d149      	bne.n	80037e8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003754:	2300      	movs	r3, #0
 8003756:	643b      	str	r3, [r7, #64]	; 0x40
 8003758:	e01e      	b.n	8003798 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800375a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003768:	4413      	add	r3, r2
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	3304      	adds	r3, #4
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d006      	beq.n	8003784 <find_volume+0x114>
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	3308      	adds	r3, #8
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe fa40 	bl	8001c00 <ld_dword>
 8003780:	4602      	mov	r2, r0
 8003782:	e000      	b.n	8003786 <find_volume+0x116>
 8003784:	2200      	movs	r2, #0
 8003786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	3358      	adds	r3, #88	; 0x58
 800378c:	443b      	add	r3, r7
 800378e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003794:	3301      	adds	r3, #1
 8003796:	643b      	str	r3, [r7, #64]	; 0x40
 8003798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800379a:	2b03      	cmp	r3, #3
 800379c:	d9dd      	bls.n	800375a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800379e:	2300      	movs	r3, #0
 80037a0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80037a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <find_volume+0x13e>
 80037a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037aa:	3b01      	subs	r3, #1
 80037ac:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80037ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	3358      	adds	r3, #88	; 0x58
 80037b4:	443b      	add	r3, r7
 80037b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80037ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80037bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <find_volume+0x15e>
 80037c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80037c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80037c6:	f7ff fefd 	bl	80035c4 <check_fs>
 80037ca:	4603      	mov	r3, r0
 80037cc:	e000      	b.n	80037d0 <find_volume+0x160>
 80037ce:	2303      	movs	r3, #3
 80037d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80037d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d905      	bls.n	80037e8 <find_volume+0x178>
 80037dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037de:	3301      	adds	r3, #1
 80037e0:	643b      	str	r3, [r7, #64]	; 0x40
 80037e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d9e2      	bls.n	80037ae <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80037e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d101      	bne.n	80037f4 <find_volume+0x184>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e181      	b.n	8003af8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80037f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d901      	bls.n	8003800 <find_volume+0x190>
 80037fc:	230d      	movs	r3, #13
 80037fe:	e17b      	b.n	8003af8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003802:	3334      	adds	r3, #52	; 0x34
 8003804:	330b      	adds	r3, #11
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe f9e2 	bl	8001bd0 <ld_word>
 800380c:	4603      	mov	r3, r0
 800380e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003812:	d001      	beq.n	8003818 <find_volume+0x1a8>
 8003814:	230d      	movs	r3, #13
 8003816:	e16f      	b.n	8003af8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381a:	3334      	adds	r3, #52	; 0x34
 800381c:	3316      	adds	r3, #22
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe f9d6 	bl	8001bd0 <ld_word>
 8003824:	4603      	mov	r3, r0
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <find_volume+0x1cc>
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	3334      	adds	r3, #52	; 0x34
 8003832:	3324      	adds	r3, #36	; 0x24
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe f9e3 	bl	8001c00 <ld_dword>
 800383a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800383c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003840:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	789b      	ldrb	r3, [r3, #2]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d005      	beq.n	8003860 <find_volume+0x1f0>
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	789b      	ldrb	r3, [r3, #2]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d001      	beq.n	8003860 <find_volume+0x1f0>
 800385c:	230d      	movs	r3, #13
 800385e:	e14b      	b.n	8003af8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003862:	789b      	ldrb	r3, [r3, #2]
 8003864:	461a      	mov	r2, r3
 8003866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003868:	fb02 f303 	mul.w	r3, r2, r3
 800386c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003874:	b29a      	uxth	r2, r3
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	895b      	ldrh	r3, [r3, #10]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <find_volume+0x224>
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	895b      	ldrh	r3, [r3, #10]
 8003886:	461a      	mov	r2, r3
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	895b      	ldrh	r3, [r3, #10]
 800388c:	3b01      	subs	r3, #1
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <find_volume+0x228>
 8003894:	230d      	movs	r3, #13
 8003896:	e12f      	b.n	8003af8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	3334      	adds	r3, #52	; 0x34
 800389c:	3311      	adds	r3, #17
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe f996 	bl	8001bd0 <ld_word>
 80038a4:	4603      	mov	r3, r0
 80038a6:	461a      	mov	r2, r3
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	891b      	ldrh	r3, [r3, #8]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <find_volume+0x24e>
 80038ba:	230d      	movs	r3, #13
 80038bc:	e11c      	b.n	8003af8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	3334      	adds	r3, #52	; 0x34
 80038c2:	3313      	adds	r3, #19
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe f983 	bl	8001bd0 <ld_word>
 80038ca:	4603      	mov	r3, r0
 80038cc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80038ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <find_volume+0x272>
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	3334      	adds	r3, #52	; 0x34
 80038d8:	3320      	adds	r3, #32
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe f990 	bl	8001c00 <ld_dword>
 80038e0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	3334      	adds	r3, #52	; 0x34
 80038e6:	330e      	adds	r3, #14
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe f971 	bl	8001bd0 <ld_word>
 80038ee:	4603      	mov	r3, r0
 80038f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80038f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <find_volume+0x28c>
 80038f8:	230d      	movs	r3, #13
 80038fa:	e0fd      	b.n	8003af8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80038fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80038fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003900:	4413      	add	r3, r2
 8003902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003904:	8912      	ldrh	r2, [r2, #8]
 8003906:	0912      	lsrs	r2, r2, #4
 8003908:	b292      	uxth	r2, r2
 800390a:	4413      	add	r3, r2
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800390e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	429a      	cmp	r2, r3
 8003914:	d204      	bcs.n	8003920 <find_volume+0x2b0>
 8003916:	230d      	movs	r3, #13
 8003918:	e0ee      	b.n	8003af8 <find_volume+0x488>
 800391a:	bf00      	nop
 800391c:	20000108 	.word	0x20000108
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003928:	8952      	ldrh	r2, [r2, #10]
 800392a:	fbb3 f3f2 	udiv	r3, r3, r2
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <find_volume+0x2ca>
 8003936:	230d      	movs	r3, #13
 8003938:	e0de      	b.n	8003af8 <find_volume+0x488>
		fmt = FS_FAT32;
 800393a:	2303      	movs	r3, #3
 800393c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003946:	4293      	cmp	r3, r2
 8003948:	d802      	bhi.n	8003950 <find_volume+0x2e0>
 800394a:	2302      	movs	r3, #2
 800394c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003956:	4293      	cmp	r3, r2
 8003958:	d802      	bhi.n	8003960 <find_volume+0x2f0>
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	1c9a      	adds	r2, r3, #2
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8003968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800396c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800396e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003972:	441a      	add	r2, r3
 8003974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003976:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8003978:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	441a      	add	r2, r3
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8003982:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003986:	2b03      	cmp	r3, #3
 8003988:	d11e      	bne.n	80039c8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	3334      	adds	r3, #52	; 0x34
 800398e:	332a      	adds	r3, #42	; 0x2a
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe f91d 	bl	8001bd0 <ld_word>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <find_volume+0x330>
 800399c:	230d      	movs	r3, #13
 800399e:	e0ab      	b.n	8003af8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80039a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a2:	891b      	ldrh	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <find_volume+0x33c>
 80039a8:	230d      	movs	r3, #13
 80039aa:	e0a5      	b.n	8003af8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80039ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ae:	3334      	adds	r3, #52	; 0x34
 80039b0:	332c      	adds	r3, #44	; 0x2c
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe f924 	bl	8001c00 <ld_dword>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039bc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	647b      	str	r3, [r7, #68]	; 0x44
 80039c6:	e01f      	b.n	8003a08 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	891b      	ldrh	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <find_volume+0x364>
 80039d0:	230d      	movs	r3, #13
 80039d2:	e091      	b.n	8003af8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039da:	441a      	add	r2, r3
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80039e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d103      	bne.n	80039f0 <find_volume+0x380>
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	e00a      	b.n	8003a06 <find_volume+0x396>
 80039f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	4613      	mov	r3, r2
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4413      	add	r3, r2
 80039fa:	085a      	lsrs	r2, r3, #1
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003a06:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a12:	0a5b      	lsrs	r3, r3, #9
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d201      	bcs.n	8003a1c <find_volume+0x3ac>
 8003a18:	230d      	movs	r3, #13
 8003a1a:	e06d      	b.n	8003af8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a22:	615a      	str	r2, [r3, #20]
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2e:	2280      	movs	r2, #128	; 0x80
 8003a30:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003a32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d149      	bne.n	8003ace <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	3334      	adds	r3, #52	; 0x34
 8003a3e:	3330      	adds	r3, #48	; 0x30
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe f8c5 	bl	8001bd0 <ld_word>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d140      	bne.n	8003ace <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4e:	3301      	adds	r3, #1
 8003a50:	4619      	mov	r1, r3
 8003a52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a54:	f7fe fb30 	bl	80020b8 <move_window>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d137      	bne.n	8003ace <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	2200      	movs	r2, #0
 8003a62:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a66:	3334      	adds	r3, #52	; 0x34
 8003a68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe f8af 	bl	8001bd0 <ld_word>
 8003a72:	4603      	mov	r3, r0
 8003a74:	461a      	mov	r2, r3
 8003a76:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d127      	bne.n	8003ace <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	3334      	adds	r3, #52	; 0x34
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe f8bc 	bl	8001c00 <ld_dword>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <find_volume+0x490>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d11e      	bne.n	8003ace <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	3334      	adds	r3, #52	; 0x34
 8003a94:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe f8b1 	bl	8001c00 <ld_dword>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <find_volume+0x494>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d113      	bne.n	8003ace <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa8:	3334      	adds	r3, #52	; 0x34
 8003aaa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe f8a6 	bl	8001c00 <ld_dword>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abc:	3334      	adds	r3, #52	; 0x34
 8003abe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe f89c 	bl	8001c00 <ld_dword>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003ad4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <find_volume+0x498>)
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <find_volume+0x498>)
 8003ae0:	801a      	strh	r2, [r3, #0]
 8003ae2:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <find_volume+0x498>)
 8003ae4:	881a      	ldrh	r2, [r3, #0]
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aec:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <find_volume+0x49c>)
 8003aee:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8003af0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003af2:	f7fe fa79 	bl	8001fe8 <clear_lock>
#endif
	return FR_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3758      	adds	r7, #88	; 0x58
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	41615252 	.word	0x41615252
 8003b04:	61417272 	.word	0x61417272
 8003b08:	2000010c 	.word	0x2000010c
 8003b0c:	20000130 	.word	0x20000130

08003b10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8003b1a:	2309      	movs	r3, #9
 8003b1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01c      	beq.n	8003b5e <validate+0x4e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d018      	beq.n	8003b5e <validate+0x4e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d013      	beq.n	8003b5e <validate+0x4e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	889a      	ldrh	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	88db      	ldrh	r3, [r3, #6]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d10c      	bne.n	8003b5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	785b      	ldrb	r3, [r3, #1]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fd ffc0 	bl	8001ad0 <disk_status>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <validate+0x4e>
			res = FR_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <validate+0x5a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	e000      	b.n	8003b6c <validate+0x5c>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	6013      	str	r3, [r2, #0]
	return res;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003b8e:	f107 0310 	add.w	r3, r7, #16
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fcd1 	bl	800353a <get_ldnumber>
 8003b98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	da01      	bge.n	8003ba4 <f_mount+0x28>
 8003ba0:	230b      	movs	r3, #11
 8003ba2:	e02b      	b.n	8003bfc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003ba4:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <f_mount+0x88>)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8003bb4:	69b8      	ldr	r0, [r7, #24]
 8003bb6:	f7fe fa17 	bl	8001fe8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	490d      	ldr	r1, [pc, #52]	; (8003c04 <f_mount+0x88>)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <f_mount+0x66>
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d001      	beq.n	8003be6 <f_mount+0x6a>
 8003be2:	2300      	movs	r3, #0
 8003be4:	e00a      	b.n	8003bfc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003be6:	f107 010c 	add.w	r1, r7, #12
 8003bea:	f107 0308 	add.w	r3, r7, #8
 8003bee:	2200      	movs	r2, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff fd3d 	bl	8003670 <find_volume>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000108 	.word	0x20000108

08003c08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b09a      	sub	sp, #104	; 0x68
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	4613      	mov	r3, r2
 8003c14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <f_open+0x18>
 8003c1c:	2309      	movs	r3, #9
 8003c1e:	e1ad      	b.n	8003f7c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8003c28:	79fa      	ldrb	r2, [r7, #7]
 8003c2a:	f107 0114 	add.w	r1, r7, #20
 8003c2e:	f107 0308 	add.w	r3, r7, #8
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fd1c 	bl	8003670 <find_volume>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8003c3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f040 8191 	bne.w	8003f6a <f_open+0x362>
		dj.obj.fs = fs;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	f107 0318 	add.w	r3, r7, #24
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fbff 	bl	8003458 <follow_path>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003c60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d11a      	bne.n	8003c9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003c68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c6c:	b25b      	sxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	da03      	bge.n	8003c7a <f_open+0x72>
				res = FR_INVALID_NAME;
 8003c72:	2306      	movs	r3, #6
 8003c74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003c78:	e011      	b.n	8003c9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf14      	ite	ne
 8003c84:	2301      	movne	r3, #1
 8003c86:	2300      	moveq	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f107 0318 	add.w	r3, r7, #24
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe f89c 	bl	8001dd0 <chk_lock>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	f003 031c 	and.w	r3, r3, #28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d07f      	beq.n	8003da8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8003ca8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d017      	beq.n	8003ce0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003cb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d10e      	bne.n	8003cd6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003cb8:	f7fe f8e6 	bl	8001e88 <enq_lock>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d006      	beq.n	8003cd0 <f_open+0xc8>
 8003cc2:	f107 0318 	add.w	r3, r7, #24
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff f916 	bl	8002ef8 <dir_register>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	e000      	b.n	8003cd2 <f_open+0xca>
 8003cd0:	2312      	movs	r3, #18
 8003cd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	f043 0308 	orr.w	r3, r3, #8
 8003cdc:	71fb      	strb	r3, [r7, #7]
 8003cde:	e010      	b.n	8003d02 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003ce0:	7fbb      	ldrb	r3, [r7, #30]
 8003ce2:	f003 0311 	and.w	r3, r3, #17
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <f_open+0xea>
					res = FR_DENIED;
 8003cea:	2307      	movs	r3, #7
 8003cec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003cf0:	e007      	b.n	8003d02 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <f_open+0xfa>
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003d02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d168      	bne.n	8003ddc <f_open+0x1d4>
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d063      	beq.n	8003ddc <f_open+0x1d4>
				dw = GET_FATTIME();
 8003d14:	f7fd fe7c 	bl	8001a10 <get_fattime>
 8003d18:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	330e      	adds	r3, #14
 8003d1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fd ffab 	bl	8001c7c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	3316      	adds	r3, #22
 8003d2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd ffa5 	bl	8001c7c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	330b      	adds	r3, #11
 8003d36:	2220      	movs	r2, #32
 8003d38:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe fe51 	bl	80029e8 <ld_clust>
 8003d46:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fe69 	bl	8002a26 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d56:	331c      	adds	r3, #28
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd ff8e 	bl	8001c7c <st_dword>
					fs->wflag = 1;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2201      	movs	r2, #1
 8003d64:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8003d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d037      	beq.n	8003ddc <f_open+0x1d4>
						dw = fs->winsect;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8003d72:	f107 0318 	add.w	r3, r7, #24
 8003d76:	2200      	movs	r2, #0
 8003d78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fb7c 	bl	8002478 <remove_chain>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8003d86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d126      	bne.n	8003ddc <f_open+0x1d4>
							res = move_window(fs, dw);
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe f990 	bl	80020b8 <move_window>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003da2:	3a01      	subs	r2, #1
 8003da4:	611a      	str	r2, [r3, #16]
 8003da6:	e019      	b.n	8003ddc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8003da8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d115      	bne.n	8003ddc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8003db0:	7fbb      	ldrb	r3, [r7, #30]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8003dba:	2304      	movs	r3, #4
 8003dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003dc0:	e00c      	b.n	8003ddc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <f_open+0x1d4>
 8003dcc:	7fbb      	ldrb	r3, [r7, #30]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <f_open+0x1d4>
						res = FR_DENIED;
 8003dd6:	2307      	movs	r3, #7
 8003dd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8003ddc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d128      	bne.n	8003e36 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8003dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bf14      	ite	ne
 8003e0e:	2301      	movne	r3, #1
 8003e10:	2300      	moveq	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	f107 0318 	add.w	r3, r7, #24
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe f855 	bl	8001ecc <inc_lock>
 8003e22:	4602      	mov	r2, r0
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <f_open+0x22e>
 8003e30:	2302      	movs	r3, #2
 8003e32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8003e36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 8095 	bne.w	8003f6a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe fdce 	bl	80029e8 <ld_clust>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e54:	331c      	adds	r3, #28
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fd fed2 	bl	8001c00 <ld_dword>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	88da      	ldrh	r2, [r3, #6]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	79fa      	ldrb	r2, [r7, #7]
 8003e7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3330      	adds	r3, #48	; 0x30
 8003e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fd ff3c 	bl	8001d16 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d060      	beq.n	8003f6a <f_open+0x362>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05c      	beq.n	8003f6a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	895b      	ldrh	r3, [r3, #10]
 8003ebc:	025b      	lsls	r3, r3, #9
 8003ebe:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ecc:	e016      	b.n	8003efc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe f93c 	bl	8002150 <get_fat>
 8003ed8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8003eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d802      	bhi.n	8003ee6 <f_open+0x2de>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d102      	bne.n	8003ef4 <f_open+0x2ec>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003ef4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003efc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d103      	bne.n	8003f0c <f_open+0x304>
 8003f04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d8e0      	bhi.n	8003ece <f_open+0x2c6>
				}
				fp->clust = clst;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f10:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003f12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d127      	bne.n	8003f6a <f_open+0x362>
 8003f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d022      	beq.n	8003f6a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe f8f2 	bl	8002112 <clust2sect>
 8003f2e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <f_open+0x336>
						res = FR_INT_ERR;
 8003f36:	2302      	movs	r3, #2
 8003f38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003f3c:	e015      	b.n	8003f6a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8003f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f40:	0a5a      	lsrs	r2, r3, #9
 8003f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f44:	441a      	add	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	7858      	ldrb	r0, [r3, #1]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f7fd fdf9 	bl	8001b50 <disk_read>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <f_open+0x362>
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003f6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <f_open+0x370>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8003f78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3768      	adds	r7, #104	; 0x68
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08e      	sub	sp, #56	; 0x38
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f107 0214 	add.w	r2, r7, #20
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fdb3 	bl	8003b10 <validate>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <f_read+0x44>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	7d5b      	ldrb	r3, [r3, #21]
 8003fbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003fc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <f_read+0x4a>
 8003fc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fcc:	e115      	b.n	80041fa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	7d1b      	ldrb	r3, [r3, #20]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <f_read+0x5a>
 8003fda:	2307      	movs	r3, #7
 8003fdc:	e10d      	b.n	80041fa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	f240 80fe 	bls.w	80041f0 <f_read+0x26c>
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8003ff8:	e0fa      	b.n	80041f0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004002:	2b00      	cmp	r3, #0
 8004004:	f040 80c6 	bne.w	8004194 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	0a5b      	lsrs	r3, r3, #9
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	8952      	ldrh	r2, [r2, #10]
 8004012:	3a01      	subs	r2, #1
 8004014:	4013      	ands	r3, r2
 8004016:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d12f      	bne.n	800407e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	633b      	str	r3, [r7, #48]	; 0x30
 800402c:	e013      	b.n	8004056 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	4619      	mov	r1, r3
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7fe fb18 	bl	8002672 <clmt_clust>
 8004042:	6338      	str	r0, [r7, #48]	; 0x30
 8004044:	e007      	b.n	8004056 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f7fe f87e 	bl	8002150 <get_fat>
 8004054:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	2b01      	cmp	r3, #1
 800405a:	d804      	bhi.n	8004066 <f_read+0xe2>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2202      	movs	r2, #2
 8004060:	755a      	strb	r2, [r3, #21]
 8004062:	2302      	movs	r3, #2
 8004064:	e0c9      	b.n	80041fa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d104      	bne.n	8004078 <f_read+0xf4>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	755a      	strb	r2, [r3, #21]
 8004074:	2301      	movs	r3, #1
 8004076:	e0c0      	b.n	80041fa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f7fe f843 	bl	8002112 <clust2sect>
 800408c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <f_read+0x11a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2202      	movs	r2, #2
 8004098:	755a      	strb	r2, [r3, #21]
 800409a:	2302      	movs	r3, #2
 800409c:	e0ad      	b.n	80041fa <f_read+0x276>
			sect += csect;
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	4413      	add	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	0a5b      	lsrs	r3, r3, #9
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d039      	beq.n	8004126 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	4413      	add	r3, r2
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	8952      	ldrh	r2, [r2, #10]
 80040bc:	4293      	cmp	r3, r2
 80040be:	d905      	bls.n	80040cc <f_read+0x148>
					cc = fs->csize - csect;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	895b      	ldrh	r3, [r3, #10]
 80040c4:	461a      	mov	r2, r3
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	7858      	ldrb	r0, [r3, #1]
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040d6:	f7fd fd3b 	bl	8001b50 <disk_read>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <f_read+0x166>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	755a      	strb	r2, [r3, #21]
 80040e6:	2301      	movs	r3, #1
 80040e8:	e087      	b.n	80041fa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	7d1b      	ldrb	r3, [r3, #20]
 80040ee:	b25b      	sxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	da14      	bge.n	800411e <f_read+0x19a>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fe:	429a      	cmp	r2, r3
 8004100:	d90d      	bls.n	800411e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a1a      	ldr	r2, [r3, #32]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	025b      	lsls	r3, r3, #9
 800410c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410e:	18d0      	adds	r0, r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3330      	adds	r3, #48	; 0x30
 8004114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004118:	4619      	mov	r1, r3
 800411a:	f7fd fddb 	bl	8001cd4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	025b      	lsls	r3, r3, #9
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004124:	e050      	b.n	80041c8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	429a      	cmp	r2, r3
 800412e:	d02e      	beq.n	800418e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	7d1b      	ldrb	r3, [r3, #20]
 8004134:	b25b      	sxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	da18      	bge.n	800416c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	7858      	ldrb	r0, [r3, #1]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a1a      	ldr	r2, [r3, #32]
 8004148:	2301      	movs	r3, #1
 800414a:	f7fd fd21 	bl	8001b90 <disk_write>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d004      	beq.n	800415e <f_read+0x1da>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	755a      	strb	r2, [r3, #21]
 800415a:	2301      	movs	r3, #1
 800415c:	e04d      	b.n	80041fa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	7d1b      	ldrb	r3, [r3, #20]
 8004162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004166:	b2da      	uxtb	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	7858      	ldrb	r0, [r3, #1]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004176:	2301      	movs	r3, #1
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	f7fd fce9 	bl	8001b50 <disk_read>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <f_read+0x20a>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	755a      	strb	r2, [r3, #21]
 800418a:	2301      	movs	r3, #1
 800418c:	e035      	b.n	80041fa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80041a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d901      	bls.n	80041ae <f_read+0x22a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041bc:	4413      	add	r3, r2
 80041be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c0:	4619      	mov	r1, r3
 80041c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041c4:	f7fd fd86 	bl	8001cd4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80041c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	4413      	add	r3, r2
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	699a      	ldr	r2, [r3, #24]
 80041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d6:	441a      	add	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	619a      	str	r2, [r3, #24]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	441a      	add	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f47f af01 	bne.w	8003ffa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3738      	adds	r7, #56	; 0x38
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b090      	sub	sp, #64	; 0x40
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f107 0208 	add.w	r2, r7, #8
 8004212:	4611      	mov	r1, r2
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fc7b 	bl	8003b10 <validate>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8004220:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004224:	2b00      	cmp	r3, #0
 8004226:	d103      	bne.n	8004230 <f_lseek+0x2e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7d5b      	ldrb	r3, [r3, #21]
 800422c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8004230:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <f_lseek+0x3c>
 8004238:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800423c:	e1e6      	b.n	800460c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80d1 	beq.w	80043ea <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d15a      	bne.n	8004306 <f_lseek+0x104>
			tbl = fp->cltbl;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	1d1a      	adds	r2, r3, #4
 800425a:	627a      	str	r2, [r7, #36]	; 0x24
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	2302      	movs	r3, #2
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	2b00      	cmp	r3, #0
 800426e:	d03a      	beq.n	80042e6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	2300      	movs	r3, #0
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	3302      	adds	r3, #2
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	3301      	adds	r3, #1
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800428c:	4618      	mov	r0, r3
 800428e:	f7fd ff5f 	bl	8002150 <get_fat>
 8004292:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	2b01      	cmp	r3, #1
 8004298:	d804      	bhi.n	80042a4 <f_lseek+0xa2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	755a      	strb	r2, [r3, #21]
 80042a0:	2302      	movs	r3, #2
 80042a2:	e1b3      	b.n	800460c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d104      	bne.n	80042b6 <f_lseek+0xb4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	755a      	strb	r2, [r3, #21]
 80042b2:	2301      	movs	r3, #1
 80042b4:	e1aa      	b.n	800460c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3301      	adds	r3, #1
 80042ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042bc:	429a      	cmp	r2, r3
 80042be:	d0de      	beq.n	800427e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80042c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d809      	bhi.n	80042dc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	1d1a      	adds	r2, r3, #4
 80042cc:	627a      	str	r2, [r7, #36]	; 0x24
 80042ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	1d1a      	adds	r2, r3, #4
 80042d6:	627a      	str	r2, [r7, #36]	; 0x24
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d3c4      	bcc.n	8004270 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ec:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80042ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d803      	bhi.n	80042fe <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e184      	b.n	8004608 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80042fe:	2311      	movs	r3, #17
 8004300:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004304:	e180      	b.n	8004608 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d902      	bls.n	8004316 <f_lseek+0x114>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8172 	beq.w	8004608 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	3b01      	subs	r3, #1
 8004328:	4619      	mov	r1, r3
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fe f9a1 	bl	8002672 <clmt_clust>
 8004330:	4602      	mov	r2, r0
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	4619      	mov	r1, r3
 800433e:	4610      	mov	r0, r2
 8004340:	f7fd fee7 	bl	8002112 <clust2sect>
 8004344:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <f_lseek+0x154>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	755a      	strb	r2, [r3, #21]
 8004352:	2302      	movs	r3, #2
 8004354:	e15a      	b.n	800460c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	3b01      	subs	r3, #1
 800435a:	0a5b      	lsrs	r3, r3, #9
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	8952      	ldrh	r2, [r2, #10]
 8004360:	3a01      	subs	r2, #1
 8004362:	4013      	ands	r3, r2
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4413      	add	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8148 	beq.w	8004608 <f_lseek+0x406>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	429a      	cmp	r2, r3
 8004380:	f000 8142 	beq.w	8004608 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7d1b      	ldrb	r3, [r3, #20]
 8004388:	b25b      	sxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	da18      	bge.n	80043c0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	7858      	ldrb	r0, [r3, #1]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1a      	ldr	r2, [r3, #32]
 800439c:	2301      	movs	r3, #1
 800439e:	f7fd fbf7 	bl	8001b90 <disk_write>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <f_lseek+0x1b0>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	755a      	strb	r2, [r3, #21]
 80043ae:	2301      	movs	r3, #1
 80043b0:	e12c      	b.n	800460c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	7d1b      	ldrb	r3, [r3, #20]
 80043b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	7858      	ldrb	r0, [r3, #1]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80043ca:	2301      	movs	r3, #1
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	f7fd fbbf 	bl	8001b50 <disk_read>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d004      	beq.n	80043e2 <f_lseek+0x1e0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	755a      	strb	r2, [r3, #21]
 80043de:	2301      	movs	r3, #1
 80043e0:	e114      	b.n	800460c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	621a      	str	r2, [r3, #32]
 80043e8:	e10e      	b.n	8004608 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d908      	bls.n	8004406 <f_lseek+0x204>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	7d1b      	ldrb	r3, [r3, #20]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004414:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80a7 	beq.w	800456c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	895b      	ldrh	r3, [r3, #10]
 8004422:	025b      	lsls	r3, r3, #9
 8004424:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01b      	beq.n	8004464 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	1e5a      	subs	r2, r3, #1
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	fbb2 f2f3 	udiv	r2, r2, r3
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	1e59      	subs	r1, r3, #1
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8004440:	429a      	cmp	r2, r3
 8004442:	d30f      	bcc.n	8004464 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	1e5a      	subs	r2, r3, #1
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	425b      	negs	r3, r3
 800444c:	401a      	ands	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	63bb      	str	r3, [r7, #56]	; 0x38
 8004462:	e022      	b.n	80044aa <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	2b00      	cmp	r3, #0
 800446e:	d119      	bne.n	80044a4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe f864 	bl	8002542 <create_chain>
 800447a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	2b01      	cmp	r3, #1
 8004480:	d104      	bne.n	800448c <f_lseek+0x28a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	755a      	strb	r2, [r3, #21]
 8004488:	2302      	movs	r3, #2
 800448a:	e0bf      	b.n	800460c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004492:	d104      	bne.n	800449e <f_lseek+0x29c>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	755a      	strb	r2, [r3, #21]
 800449a:	2301      	movs	r3, #1
 800449c:	e0b6      	b.n	800460c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044a2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044a8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d05d      	beq.n	800456c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80044b0:	e03a      	b.n	8004528 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	441a      	add	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	7d1b      	ldrb	r3, [r3, #20]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fe f833 	bl	8002542 <create_chain>
 80044dc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d108      	bne.n	80044f6 <f_lseek+0x2f4>
							ofs = 0; break;
 80044e4:	2300      	movs	r3, #0
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	e022      	b.n	8004530 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fd fe2e 	bl	8002150 <get_fat>
 80044f4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	d104      	bne.n	8004508 <f_lseek+0x306>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	755a      	strb	r2, [r3, #21]
 8004504:	2301      	movs	r3, #1
 8004506:	e081      	b.n	800460c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	2b01      	cmp	r3, #1
 800450c:	d904      	bls.n	8004518 <f_lseek+0x316>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004514:	429a      	cmp	r2, r3
 8004516:	d304      	bcc.n	8004522 <f_lseek+0x320>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	755a      	strb	r2, [r3, #21]
 800451e:	2302      	movs	r3, #2
 8004520:	e074      	b.n	800460c <f_lseek+0x40a>
					fp->clust = clst;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004526:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	429a      	cmp	r2, r3
 800452e:	d8c0      	bhi.n	80044b2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699a      	ldr	r2, [r3, #24]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	441a      	add	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004542:	2b00      	cmp	r3, #0
 8004544:	d012      	beq.n	800456c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800454a:	4618      	mov	r0, r3
 800454c:	f7fd fde1 	bl	8002112 <clust2sect>
 8004550:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8004552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <f_lseek+0x360>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	755a      	strb	r2, [r3, #21]
 800455e:	2302      	movs	r3, #2
 8004560:	e054      	b.n	800460c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	0a5b      	lsrs	r3, r3, #9
 8004566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004568:	4413      	add	r3, r2
 800456a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	429a      	cmp	r2, r3
 8004576:	d90a      	bls.n	800458e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	7d1b      	ldrb	r3, [r3, #20]
 8004584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004588:	b2da      	uxtb	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004596:	2b00      	cmp	r3, #0
 8004598:	d036      	beq.n	8004608 <f_lseek+0x406>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d031      	beq.n	8004608 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	7d1b      	ldrb	r3, [r3, #20]
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	da18      	bge.n	80045e0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	7858      	ldrb	r0, [r3, #1]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1a      	ldr	r2, [r3, #32]
 80045bc:	2301      	movs	r3, #1
 80045be:	f7fd fae7 	bl	8001b90 <disk_write>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d004      	beq.n	80045d2 <f_lseek+0x3d0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	755a      	strb	r2, [r3, #21]
 80045ce:	2301      	movs	r3, #1
 80045d0:	e01c      	b.n	800460c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7d1b      	ldrb	r3, [r3, #20]
 80045d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	7858      	ldrb	r0, [r3, #1]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80045ea:	2301      	movs	r3, #1
 80045ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045ee:	f7fd faaf 	bl	8001b50 <disk_read>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <f_lseek+0x400>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	755a      	strb	r2, [r3, #21]
 80045fe:	2301      	movs	r3, #1
 8004600:	e004      	b.n	800460c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004606:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8004608:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800460c:	4618      	mov	r0, r3
 800460e:	3740      	adds	r7, #64	; 0x40
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004622:	2301      	movs	r3, #1
 8004624:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800462a:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <FATFS_LinkDriverEx+0x94>)
 800462c:	7a5b      	ldrb	r3, [r3, #9]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d131      	bne.n	8004698 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004634:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <FATFS_LinkDriverEx+0x94>)
 8004636:	7a5b      	ldrb	r3, [r3, #9]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <FATFS_LinkDriverEx+0x94>)
 800463e:	2100      	movs	r1, #0
 8004640:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004642:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <FATFS_LinkDriverEx+0x94>)
 8004644:	7a5b      	ldrb	r3, [r3, #9]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	4a17      	ldr	r2, [pc, #92]	; (80046a8 <FATFS_LinkDriverEx+0x94>)
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004652:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <FATFS_LinkDriverEx+0x94>)
 8004654:	7a5b      	ldrb	r3, [r3, #9]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <FATFS_LinkDriverEx+0x94>)
 800465c:	4413      	add	r3, r2
 800465e:	79fa      	ldrb	r2, [r7, #7]
 8004660:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <FATFS_LinkDriverEx+0x94>)
 8004664:	7a5b      	ldrb	r3, [r3, #9]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	b2d1      	uxtb	r1, r2
 800466c:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <FATFS_LinkDriverEx+0x94>)
 800466e:	7251      	strb	r1, [r2, #9]
 8004670:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004672:	7dbb      	ldrb	r3, [r7, #22]
 8004674:	3330      	adds	r3, #48	; 0x30
 8004676:	b2da      	uxtb	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	3301      	adds	r3, #1
 8004680:	223a      	movs	r2, #58	; 0x3a
 8004682:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	3302      	adds	r3, #2
 8004688:	222f      	movs	r2, #47	; 0x2f
 800468a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	3303      	adds	r3, #3
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004698:	7dfb      	ldrb	r3, [r7, #23]
}
 800469a:	4618      	mov	r0, r3
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20000330 	.word	0x20000330

080046ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80046b6:	2200      	movs	r2, #0
 80046b8:	6839      	ldr	r1, [r7, #0]
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ffaa 	bl	8004614 <FATFS_LinkDriverEx>
 80046c0:	4603      	mov	r3, r0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	6039      	str	r1, [r7, #0]
 80046d6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	2b7f      	cmp	r3, #127	; 0x7f
 80046dc:	d802      	bhi.n	80046e4 <ff_convert+0x18>
		c = chr;
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	81fb      	strh	r3, [r7, #14]
 80046e2:	e025      	b.n	8004730 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	2bff      	cmp	r3, #255	; 0xff
 80046ee:	d805      	bhi.n	80046fc <ff_convert+0x30>
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	3b80      	subs	r3, #128	; 0x80
 80046f4:	4a12      	ldr	r2, [pc, #72]	; (8004740 <ff_convert+0x74>)
 80046f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046fa:	e000      	b.n	80046fe <ff_convert+0x32>
 80046fc:	2300      	movs	r3, #0
 80046fe:	81fb      	strh	r3, [r7, #14]
 8004700:	e016      	b.n	8004730 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8004702:	2300      	movs	r3, #0
 8004704:	81fb      	strh	r3, [r7, #14]
 8004706:	e009      	b.n	800471c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8004708:	89fb      	ldrh	r3, [r7, #14]
 800470a:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <ff_convert+0x74>)
 800470c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004710:	88fa      	ldrh	r2, [r7, #6]
 8004712:	429a      	cmp	r2, r3
 8004714:	d006      	beq.n	8004724 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8004716:	89fb      	ldrh	r3, [r7, #14]
 8004718:	3301      	adds	r3, #1
 800471a:	81fb      	strh	r3, [r7, #14]
 800471c:	89fb      	ldrh	r3, [r7, #14]
 800471e:	2b7f      	cmp	r3, #127	; 0x7f
 8004720:	d9f2      	bls.n	8004708 <ff_convert+0x3c>
 8004722:	e000      	b.n	8004726 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8004724:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8004726:	89fb      	ldrh	r3, [r7, #14]
 8004728:	3380      	adds	r3, #128	; 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8004730:	89fb      	ldrh	r3, [r7, #14]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	080053fc 	.word	0x080053fc

08004744 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004754:	d201      	bcs.n	800475a <ff_wtoupper+0x16>
 8004756:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <ff_wtoupper+0x10c>)
 8004758:	e000      	b.n	800475c <ff_wtoupper+0x18>
 800475a:	4b3e      	ldr	r3, [pc, #248]	; (8004854 <ff_wtoupper+0x110>)
 800475c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	1c9a      	adds	r2, r3, #2
 8004762:	617a      	str	r2, [r7, #20]
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8004768:	8a7b      	ldrh	r3, [r7, #18]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d068      	beq.n	8004840 <ff_wtoupper+0xfc>
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	8a7b      	ldrh	r3, [r7, #18]
 8004772:	429a      	cmp	r2, r3
 8004774:	d364      	bcc.n	8004840 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	1c9a      	adds	r2, r3, #2
 800477a:	617a      	str	r2, [r7, #20]
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	823b      	strh	r3, [r7, #16]
 8004780:	8a3b      	ldrh	r3, [r7, #16]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	81fb      	strh	r3, [r7, #14]
 8004786:	8a3b      	ldrh	r3, [r7, #16]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	8a79      	ldrh	r1, [r7, #18]
 8004790:	8a3b      	ldrh	r3, [r7, #16]
 8004792:	440b      	add	r3, r1
 8004794:	429a      	cmp	r2, r3
 8004796:	da49      	bge.n	800482c <ff_wtoupper+0xe8>
			switch (cmd) {
 8004798:	89fb      	ldrh	r3, [r7, #14]
 800479a:	2b08      	cmp	r3, #8
 800479c:	d84f      	bhi.n	800483e <ff_wtoupper+0xfa>
 800479e:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <ff_wtoupper+0x60>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047db 	.word	0x080047db
 80047ac:	080047f1 	.word	0x080047f1
 80047b0:	080047f9 	.word	0x080047f9
 80047b4:	08004801 	.word	0x08004801
 80047b8:	08004809 	.word	0x08004809
 80047bc:	08004811 	.word	0x08004811
 80047c0:	08004819 	.word	0x08004819
 80047c4:	08004821 	.word	0x08004821
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80047c8:	88fa      	ldrh	r2, [r7, #6]
 80047ca:	8a7b      	ldrh	r3, [r7, #18]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4413      	add	r3, r2
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	80fb      	strh	r3, [r7, #6]
 80047d8:	e027      	b.n	800482a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	8a7b      	ldrh	r3, [r7, #18]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	80fb      	strh	r3, [r7, #6]
 80047ee:	e01c      	b.n	800482a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	3b10      	subs	r3, #16
 80047f4:	80fb      	strh	r3, [r7, #6]
 80047f6:	e018      	b.n	800482a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	3b20      	subs	r3, #32
 80047fc:	80fb      	strh	r3, [r7, #6]
 80047fe:	e014      	b.n	800482a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8004800:	88fb      	ldrh	r3, [r7, #6]
 8004802:	3b30      	subs	r3, #48	; 0x30
 8004804:	80fb      	strh	r3, [r7, #6]
 8004806:	e010      	b.n	800482a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	3b1a      	subs	r3, #26
 800480c:	80fb      	strh	r3, [r7, #6]
 800480e:	e00c      	b.n	800482a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8004810:	88fb      	ldrh	r3, [r7, #6]
 8004812:	3308      	adds	r3, #8
 8004814:	80fb      	strh	r3, [r7, #6]
 8004816:	e008      	b.n	800482a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	3b50      	subs	r3, #80	; 0x50
 800481c:	80fb      	strh	r3, [r7, #6]
 800481e:	e004      	b.n	800482a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8004826:	80fb      	strh	r3, [r7, #6]
 8004828:	bf00      	nop
			}
			break;
 800482a:	e008      	b.n	800483e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800482c:	89fb      	ldrh	r3, [r7, #14]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d195      	bne.n	800475e <ff_wtoupper+0x1a>
 8004832:	8a3b      	ldrh	r3, [r7, #16]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4413      	add	r3, r2
 800483a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800483c:	e78f      	b.n	800475e <ff_wtoupper+0x1a>
			break;
 800483e:	bf00      	nop
	}

	return chr;
 8004840:	88fb      	ldrh	r3, [r7, #6]
}
 8004842:	4618      	mov	r0, r3
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	080054fc 	.word	0x080054fc
 8004854:	080056f0 	.word	0x080056f0

08004858 <__errno>:
 8004858:	4b01      	ldr	r3, [pc, #4]	; (8004860 <__errno+0x8>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000020 	.word	0x20000020

08004864 <__libc_init_array>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	4d0d      	ldr	r5, [pc, #52]	; (800489c <__libc_init_array+0x38>)
 8004868:	4c0d      	ldr	r4, [pc, #52]	; (80048a0 <__libc_init_array+0x3c>)
 800486a:	1b64      	subs	r4, r4, r5
 800486c:	10a4      	asrs	r4, r4, #2
 800486e:	2600      	movs	r6, #0
 8004870:	42a6      	cmp	r6, r4
 8004872:	d109      	bne.n	8004888 <__libc_init_array+0x24>
 8004874:	4d0b      	ldr	r5, [pc, #44]	; (80048a4 <__libc_init_array+0x40>)
 8004876:	4c0c      	ldr	r4, [pc, #48]	; (80048a8 <__libc_init_array+0x44>)
 8004878:	f000 fd26 	bl	80052c8 <_init>
 800487c:	1b64      	subs	r4, r4, r5
 800487e:	10a4      	asrs	r4, r4, #2
 8004880:	2600      	movs	r6, #0
 8004882:	42a6      	cmp	r6, r4
 8004884:	d105      	bne.n	8004892 <__libc_init_array+0x2e>
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	f855 3b04 	ldr.w	r3, [r5], #4
 800488c:	4798      	blx	r3
 800488e:	3601      	adds	r6, #1
 8004890:	e7ee      	b.n	8004870 <__libc_init_array+0xc>
 8004892:	f855 3b04 	ldr.w	r3, [r5], #4
 8004896:	4798      	blx	r3
 8004898:	3601      	adds	r6, #1
 800489a:	e7f2      	b.n	8004882 <__libc_init_array+0x1e>
 800489c:	08005818 	.word	0x08005818
 80048a0:	08005818 	.word	0x08005818
 80048a4:	08005818 	.word	0x08005818
 80048a8:	0800581c 	.word	0x0800581c

080048ac <malloc>:
 80048ac:	4b02      	ldr	r3, [pc, #8]	; (80048b8 <malloc+0xc>)
 80048ae:	4601      	mov	r1, r0
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	f000 b877 	b.w	80049a4 <_malloc_r>
 80048b6:	bf00      	nop
 80048b8:	20000020 	.word	0x20000020

080048bc <memset>:
 80048bc:	4402      	add	r2, r0
 80048be:	4603      	mov	r3, r0
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d100      	bne.n	80048c6 <memset+0xa>
 80048c4:	4770      	bx	lr
 80048c6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ca:	e7f9      	b.n	80048c0 <memset+0x4>

080048cc <_free_r>:
 80048cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048ce:	2900      	cmp	r1, #0
 80048d0:	d044      	beq.n	800495c <_free_r+0x90>
 80048d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d6:	9001      	str	r0, [sp, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f1a1 0404 	sub.w	r4, r1, #4
 80048de:	bfb8      	it	lt
 80048e0:	18e4      	addlt	r4, r4, r3
 80048e2:	f000 fc39 	bl	8005158 <__malloc_lock>
 80048e6:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <_free_r+0x94>)
 80048e8:	9801      	ldr	r0, [sp, #4]
 80048ea:	6813      	ldr	r3, [r2, #0]
 80048ec:	b933      	cbnz	r3, 80048fc <_free_r+0x30>
 80048ee:	6063      	str	r3, [r4, #4]
 80048f0:	6014      	str	r4, [r2, #0]
 80048f2:	b003      	add	sp, #12
 80048f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048f8:	f000 bc34 	b.w	8005164 <__malloc_unlock>
 80048fc:	42a3      	cmp	r3, r4
 80048fe:	d908      	bls.n	8004912 <_free_r+0x46>
 8004900:	6825      	ldr	r5, [r4, #0]
 8004902:	1961      	adds	r1, r4, r5
 8004904:	428b      	cmp	r3, r1
 8004906:	bf01      	itttt	eq
 8004908:	6819      	ldreq	r1, [r3, #0]
 800490a:	685b      	ldreq	r3, [r3, #4]
 800490c:	1949      	addeq	r1, r1, r5
 800490e:	6021      	streq	r1, [r4, #0]
 8004910:	e7ed      	b.n	80048ee <_free_r+0x22>
 8004912:	461a      	mov	r2, r3
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	b10b      	cbz	r3, 800491c <_free_r+0x50>
 8004918:	42a3      	cmp	r3, r4
 800491a:	d9fa      	bls.n	8004912 <_free_r+0x46>
 800491c:	6811      	ldr	r1, [r2, #0]
 800491e:	1855      	adds	r5, r2, r1
 8004920:	42a5      	cmp	r5, r4
 8004922:	d10b      	bne.n	800493c <_free_r+0x70>
 8004924:	6824      	ldr	r4, [r4, #0]
 8004926:	4421      	add	r1, r4
 8004928:	1854      	adds	r4, r2, r1
 800492a:	42a3      	cmp	r3, r4
 800492c:	6011      	str	r1, [r2, #0]
 800492e:	d1e0      	bne.n	80048f2 <_free_r+0x26>
 8004930:	681c      	ldr	r4, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	6053      	str	r3, [r2, #4]
 8004936:	4421      	add	r1, r4
 8004938:	6011      	str	r1, [r2, #0]
 800493a:	e7da      	b.n	80048f2 <_free_r+0x26>
 800493c:	d902      	bls.n	8004944 <_free_r+0x78>
 800493e:	230c      	movs	r3, #12
 8004940:	6003      	str	r3, [r0, #0]
 8004942:	e7d6      	b.n	80048f2 <_free_r+0x26>
 8004944:	6825      	ldr	r5, [r4, #0]
 8004946:	1961      	adds	r1, r4, r5
 8004948:	428b      	cmp	r3, r1
 800494a:	bf04      	itt	eq
 800494c:	6819      	ldreq	r1, [r3, #0]
 800494e:	685b      	ldreq	r3, [r3, #4]
 8004950:	6063      	str	r3, [r4, #4]
 8004952:	bf04      	itt	eq
 8004954:	1949      	addeq	r1, r1, r5
 8004956:	6021      	streq	r1, [r4, #0]
 8004958:	6054      	str	r4, [r2, #4]
 800495a:	e7ca      	b.n	80048f2 <_free_r+0x26>
 800495c:	b003      	add	sp, #12
 800495e:	bd30      	pop	{r4, r5, pc}
 8004960:	2000033c 	.word	0x2000033c

08004964 <sbrk_aligned>:
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	4e0e      	ldr	r6, [pc, #56]	; (80049a0 <sbrk_aligned+0x3c>)
 8004968:	460c      	mov	r4, r1
 800496a:	6831      	ldr	r1, [r6, #0]
 800496c:	4605      	mov	r5, r0
 800496e:	b911      	cbnz	r1, 8004976 <sbrk_aligned+0x12>
 8004970:	f000 f902 	bl	8004b78 <_sbrk_r>
 8004974:	6030      	str	r0, [r6, #0]
 8004976:	4621      	mov	r1, r4
 8004978:	4628      	mov	r0, r5
 800497a:	f000 f8fd 	bl	8004b78 <_sbrk_r>
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	d00a      	beq.n	8004998 <sbrk_aligned+0x34>
 8004982:	1cc4      	adds	r4, r0, #3
 8004984:	f024 0403 	bic.w	r4, r4, #3
 8004988:	42a0      	cmp	r0, r4
 800498a:	d007      	beq.n	800499c <sbrk_aligned+0x38>
 800498c:	1a21      	subs	r1, r4, r0
 800498e:	4628      	mov	r0, r5
 8004990:	f000 f8f2 	bl	8004b78 <_sbrk_r>
 8004994:	3001      	adds	r0, #1
 8004996:	d101      	bne.n	800499c <sbrk_aligned+0x38>
 8004998:	f04f 34ff 	mov.w	r4, #4294967295
 800499c:	4620      	mov	r0, r4
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	20000340 	.word	0x20000340

080049a4 <_malloc_r>:
 80049a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a8:	1ccd      	adds	r5, r1, #3
 80049aa:	f025 0503 	bic.w	r5, r5, #3
 80049ae:	3508      	adds	r5, #8
 80049b0:	2d0c      	cmp	r5, #12
 80049b2:	bf38      	it	cc
 80049b4:	250c      	movcc	r5, #12
 80049b6:	2d00      	cmp	r5, #0
 80049b8:	4607      	mov	r7, r0
 80049ba:	db01      	blt.n	80049c0 <_malloc_r+0x1c>
 80049bc:	42a9      	cmp	r1, r5
 80049be:	d905      	bls.n	80049cc <_malloc_r+0x28>
 80049c0:	230c      	movs	r3, #12
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	2600      	movs	r6, #0
 80049c6:	4630      	mov	r0, r6
 80049c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049cc:	4e2e      	ldr	r6, [pc, #184]	; (8004a88 <_malloc_r+0xe4>)
 80049ce:	f000 fbc3 	bl	8005158 <__malloc_lock>
 80049d2:	6833      	ldr	r3, [r6, #0]
 80049d4:	461c      	mov	r4, r3
 80049d6:	bb34      	cbnz	r4, 8004a26 <_malloc_r+0x82>
 80049d8:	4629      	mov	r1, r5
 80049da:	4638      	mov	r0, r7
 80049dc:	f7ff ffc2 	bl	8004964 <sbrk_aligned>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	4604      	mov	r4, r0
 80049e4:	d14d      	bne.n	8004a82 <_malloc_r+0xde>
 80049e6:	6834      	ldr	r4, [r6, #0]
 80049e8:	4626      	mov	r6, r4
 80049ea:	2e00      	cmp	r6, #0
 80049ec:	d140      	bne.n	8004a70 <_malloc_r+0xcc>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	4631      	mov	r1, r6
 80049f2:	4638      	mov	r0, r7
 80049f4:	eb04 0803 	add.w	r8, r4, r3
 80049f8:	f000 f8be 	bl	8004b78 <_sbrk_r>
 80049fc:	4580      	cmp	r8, r0
 80049fe:	d13a      	bne.n	8004a76 <_malloc_r+0xd2>
 8004a00:	6821      	ldr	r1, [r4, #0]
 8004a02:	3503      	adds	r5, #3
 8004a04:	1a6d      	subs	r5, r5, r1
 8004a06:	f025 0503 	bic.w	r5, r5, #3
 8004a0a:	3508      	adds	r5, #8
 8004a0c:	2d0c      	cmp	r5, #12
 8004a0e:	bf38      	it	cc
 8004a10:	250c      	movcc	r5, #12
 8004a12:	4629      	mov	r1, r5
 8004a14:	4638      	mov	r0, r7
 8004a16:	f7ff ffa5 	bl	8004964 <sbrk_aligned>
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d02b      	beq.n	8004a76 <_malloc_r+0xd2>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	442b      	add	r3, r5
 8004a22:	6023      	str	r3, [r4, #0]
 8004a24:	e00e      	b.n	8004a44 <_malloc_r+0xa0>
 8004a26:	6822      	ldr	r2, [r4, #0]
 8004a28:	1b52      	subs	r2, r2, r5
 8004a2a:	d41e      	bmi.n	8004a6a <_malloc_r+0xc6>
 8004a2c:	2a0b      	cmp	r2, #11
 8004a2e:	d916      	bls.n	8004a5e <_malloc_r+0xba>
 8004a30:	1961      	adds	r1, r4, r5
 8004a32:	42a3      	cmp	r3, r4
 8004a34:	6025      	str	r5, [r4, #0]
 8004a36:	bf18      	it	ne
 8004a38:	6059      	strne	r1, [r3, #4]
 8004a3a:	6863      	ldr	r3, [r4, #4]
 8004a3c:	bf08      	it	eq
 8004a3e:	6031      	streq	r1, [r6, #0]
 8004a40:	5162      	str	r2, [r4, r5]
 8004a42:	604b      	str	r3, [r1, #4]
 8004a44:	4638      	mov	r0, r7
 8004a46:	f104 060b 	add.w	r6, r4, #11
 8004a4a:	f000 fb8b 	bl	8005164 <__malloc_unlock>
 8004a4e:	f026 0607 	bic.w	r6, r6, #7
 8004a52:	1d23      	adds	r3, r4, #4
 8004a54:	1af2      	subs	r2, r6, r3
 8004a56:	d0b6      	beq.n	80049c6 <_malloc_r+0x22>
 8004a58:	1b9b      	subs	r3, r3, r6
 8004a5a:	50a3      	str	r3, [r4, r2]
 8004a5c:	e7b3      	b.n	80049c6 <_malloc_r+0x22>
 8004a5e:	6862      	ldr	r2, [r4, #4]
 8004a60:	42a3      	cmp	r3, r4
 8004a62:	bf0c      	ite	eq
 8004a64:	6032      	streq	r2, [r6, #0]
 8004a66:	605a      	strne	r2, [r3, #4]
 8004a68:	e7ec      	b.n	8004a44 <_malloc_r+0xa0>
 8004a6a:	4623      	mov	r3, r4
 8004a6c:	6864      	ldr	r4, [r4, #4]
 8004a6e:	e7b2      	b.n	80049d6 <_malloc_r+0x32>
 8004a70:	4634      	mov	r4, r6
 8004a72:	6876      	ldr	r6, [r6, #4]
 8004a74:	e7b9      	b.n	80049ea <_malloc_r+0x46>
 8004a76:	230c      	movs	r3, #12
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	f000 fb72 	bl	8005164 <__malloc_unlock>
 8004a80:	e7a1      	b.n	80049c6 <_malloc_r+0x22>
 8004a82:	6025      	str	r5, [r4, #0]
 8004a84:	e7de      	b.n	8004a44 <_malloc_r+0xa0>
 8004a86:	bf00      	nop
 8004a88:	2000033c 	.word	0x2000033c

08004a8c <_puts_r>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	460e      	mov	r6, r1
 8004a90:	4605      	mov	r5, r0
 8004a92:	b118      	cbz	r0, 8004a9c <_puts_r+0x10>
 8004a94:	6983      	ldr	r3, [r0, #24]
 8004a96:	b90b      	cbnz	r3, 8004a9c <_puts_r+0x10>
 8004a98:	f000 fa58 	bl	8004f4c <__sinit>
 8004a9c:	69ab      	ldr	r3, [r5, #24]
 8004a9e:	68ac      	ldr	r4, [r5, #8]
 8004aa0:	b913      	cbnz	r3, 8004aa8 <_puts_r+0x1c>
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f000 fa52 	bl	8004f4c <__sinit>
 8004aa8:	4b2c      	ldr	r3, [pc, #176]	; (8004b5c <_puts_r+0xd0>)
 8004aaa:	429c      	cmp	r4, r3
 8004aac:	d120      	bne.n	8004af0 <_puts_r+0x64>
 8004aae:	686c      	ldr	r4, [r5, #4]
 8004ab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ab2:	07db      	lsls	r3, r3, #31
 8004ab4:	d405      	bmi.n	8004ac2 <_puts_r+0x36>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	0598      	lsls	r0, r3, #22
 8004aba:	d402      	bmi.n	8004ac2 <_puts_r+0x36>
 8004abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004abe:	f000 fae3 	bl	8005088 <__retarget_lock_acquire_recursive>
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	0719      	lsls	r1, r3, #28
 8004ac6:	d51d      	bpl.n	8004b04 <_puts_r+0x78>
 8004ac8:	6923      	ldr	r3, [r4, #16]
 8004aca:	b1db      	cbz	r3, 8004b04 <_puts_r+0x78>
 8004acc:	3e01      	subs	r6, #1
 8004ace:	68a3      	ldr	r3, [r4, #8]
 8004ad0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	60a3      	str	r3, [r4, #8]
 8004ad8:	bb39      	cbnz	r1, 8004b2a <_puts_r+0x9e>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da38      	bge.n	8004b50 <_puts_r+0xc4>
 8004ade:	4622      	mov	r2, r4
 8004ae0:	210a      	movs	r1, #10
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f000 f858 	bl	8004b98 <__swbuf_r>
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d011      	beq.n	8004b10 <_puts_r+0x84>
 8004aec:	250a      	movs	r5, #10
 8004aee:	e011      	b.n	8004b14 <_puts_r+0x88>
 8004af0:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <_puts_r+0xd4>)
 8004af2:	429c      	cmp	r4, r3
 8004af4:	d101      	bne.n	8004afa <_puts_r+0x6e>
 8004af6:	68ac      	ldr	r4, [r5, #8]
 8004af8:	e7da      	b.n	8004ab0 <_puts_r+0x24>
 8004afa:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <_puts_r+0xd8>)
 8004afc:	429c      	cmp	r4, r3
 8004afe:	bf08      	it	eq
 8004b00:	68ec      	ldreq	r4, [r5, #12]
 8004b02:	e7d5      	b.n	8004ab0 <_puts_r+0x24>
 8004b04:	4621      	mov	r1, r4
 8004b06:	4628      	mov	r0, r5
 8004b08:	f000 f898 	bl	8004c3c <__swsetup_r>
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d0dd      	beq.n	8004acc <_puts_r+0x40>
 8004b10:	f04f 35ff 	mov.w	r5, #4294967295
 8004b14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b16:	07da      	lsls	r2, r3, #31
 8004b18:	d405      	bmi.n	8004b26 <_puts_r+0x9a>
 8004b1a:	89a3      	ldrh	r3, [r4, #12]
 8004b1c:	059b      	lsls	r3, r3, #22
 8004b1e:	d402      	bmi.n	8004b26 <_puts_r+0x9a>
 8004b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b22:	f000 fab2 	bl	800508a <__retarget_lock_release_recursive>
 8004b26:	4628      	mov	r0, r5
 8004b28:	bd70      	pop	{r4, r5, r6, pc}
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	da04      	bge.n	8004b38 <_puts_r+0xac>
 8004b2e:	69a2      	ldr	r2, [r4, #24]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	dc06      	bgt.n	8004b42 <_puts_r+0xb6>
 8004b34:	290a      	cmp	r1, #10
 8004b36:	d004      	beq.n	8004b42 <_puts_r+0xb6>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	6022      	str	r2, [r4, #0]
 8004b3e:	7019      	strb	r1, [r3, #0]
 8004b40:	e7c5      	b.n	8004ace <_puts_r+0x42>
 8004b42:	4622      	mov	r2, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	f000 f827 	bl	8004b98 <__swbuf_r>
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d1bf      	bne.n	8004ace <_puts_r+0x42>
 8004b4e:	e7df      	b.n	8004b10 <_puts_r+0x84>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	250a      	movs	r5, #10
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	6022      	str	r2, [r4, #0]
 8004b58:	701d      	strb	r5, [r3, #0]
 8004b5a:	e7db      	b.n	8004b14 <_puts_r+0x88>
 8004b5c:	080057d0 	.word	0x080057d0
 8004b60:	080057f0 	.word	0x080057f0
 8004b64:	080057b0 	.word	0x080057b0

08004b68 <puts>:
 8004b68:	4b02      	ldr	r3, [pc, #8]	; (8004b74 <puts+0xc>)
 8004b6a:	4601      	mov	r1, r0
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	f7ff bf8d 	b.w	8004a8c <_puts_r>
 8004b72:	bf00      	nop
 8004b74:	20000020 	.word	0x20000020

08004b78 <_sbrk_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4d06      	ldr	r5, [pc, #24]	; (8004b94 <_sbrk_r+0x1c>)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4604      	mov	r4, r0
 8004b80:	4608      	mov	r0, r1
 8004b82:	602b      	str	r3, [r5, #0]
 8004b84:	f7fb ff36 	bl	80009f4 <_sbrk>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d102      	bne.n	8004b92 <_sbrk_r+0x1a>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	b103      	cbz	r3, 8004b92 <_sbrk_r+0x1a>
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	20000348 	.word	0x20000348

08004b98 <__swbuf_r>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	460e      	mov	r6, r1
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	4605      	mov	r5, r0
 8004ba0:	b118      	cbz	r0, 8004baa <__swbuf_r+0x12>
 8004ba2:	6983      	ldr	r3, [r0, #24]
 8004ba4:	b90b      	cbnz	r3, 8004baa <__swbuf_r+0x12>
 8004ba6:	f000 f9d1 	bl	8004f4c <__sinit>
 8004baa:	4b21      	ldr	r3, [pc, #132]	; (8004c30 <__swbuf_r+0x98>)
 8004bac:	429c      	cmp	r4, r3
 8004bae:	d12b      	bne.n	8004c08 <__swbuf_r+0x70>
 8004bb0:	686c      	ldr	r4, [r5, #4]
 8004bb2:	69a3      	ldr	r3, [r4, #24]
 8004bb4:	60a3      	str	r3, [r4, #8]
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	071a      	lsls	r2, r3, #28
 8004bba:	d52f      	bpl.n	8004c1c <__swbuf_r+0x84>
 8004bbc:	6923      	ldr	r3, [r4, #16]
 8004bbe:	b36b      	cbz	r3, 8004c1c <__swbuf_r+0x84>
 8004bc0:	6923      	ldr	r3, [r4, #16]
 8004bc2:	6820      	ldr	r0, [r4, #0]
 8004bc4:	1ac0      	subs	r0, r0, r3
 8004bc6:	6963      	ldr	r3, [r4, #20]
 8004bc8:	b2f6      	uxtb	r6, r6
 8004bca:	4283      	cmp	r3, r0
 8004bcc:	4637      	mov	r7, r6
 8004bce:	dc04      	bgt.n	8004bda <__swbuf_r+0x42>
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f000 f926 	bl	8004e24 <_fflush_r>
 8004bd8:	bb30      	cbnz	r0, 8004c28 <__swbuf_r+0x90>
 8004bda:	68a3      	ldr	r3, [r4, #8]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	60a3      	str	r3, [r4, #8]
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	6022      	str	r2, [r4, #0]
 8004be6:	701e      	strb	r6, [r3, #0]
 8004be8:	6963      	ldr	r3, [r4, #20]
 8004bea:	3001      	adds	r0, #1
 8004bec:	4283      	cmp	r3, r0
 8004bee:	d004      	beq.n	8004bfa <__swbuf_r+0x62>
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	07db      	lsls	r3, r3, #31
 8004bf4:	d506      	bpl.n	8004c04 <__swbuf_r+0x6c>
 8004bf6:	2e0a      	cmp	r6, #10
 8004bf8:	d104      	bne.n	8004c04 <__swbuf_r+0x6c>
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f000 f911 	bl	8004e24 <_fflush_r>
 8004c02:	b988      	cbnz	r0, 8004c28 <__swbuf_r+0x90>
 8004c04:	4638      	mov	r0, r7
 8004c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <__swbuf_r+0x9c>)
 8004c0a:	429c      	cmp	r4, r3
 8004c0c:	d101      	bne.n	8004c12 <__swbuf_r+0x7a>
 8004c0e:	68ac      	ldr	r4, [r5, #8]
 8004c10:	e7cf      	b.n	8004bb2 <__swbuf_r+0x1a>
 8004c12:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <__swbuf_r+0xa0>)
 8004c14:	429c      	cmp	r4, r3
 8004c16:	bf08      	it	eq
 8004c18:	68ec      	ldreq	r4, [r5, #12]
 8004c1a:	e7ca      	b.n	8004bb2 <__swbuf_r+0x1a>
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f000 f80c 	bl	8004c3c <__swsetup_r>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d0cb      	beq.n	8004bc0 <__swbuf_r+0x28>
 8004c28:	f04f 37ff 	mov.w	r7, #4294967295
 8004c2c:	e7ea      	b.n	8004c04 <__swbuf_r+0x6c>
 8004c2e:	bf00      	nop
 8004c30:	080057d0 	.word	0x080057d0
 8004c34:	080057f0 	.word	0x080057f0
 8004c38:	080057b0 	.word	0x080057b0

08004c3c <__swsetup_r>:
 8004c3c:	4b32      	ldr	r3, [pc, #200]	; (8004d08 <__swsetup_r+0xcc>)
 8004c3e:	b570      	push	{r4, r5, r6, lr}
 8004c40:	681d      	ldr	r5, [r3, #0]
 8004c42:	4606      	mov	r6, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	b125      	cbz	r5, 8004c52 <__swsetup_r+0x16>
 8004c48:	69ab      	ldr	r3, [r5, #24]
 8004c4a:	b913      	cbnz	r3, 8004c52 <__swsetup_r+0x16>
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f000 f97d 	bl	8004f4c <__sinit>
 8004c52:	4b2e      	ldr	r3, [pc, #184]	; (8004d0c <__swsetup_r+0xd0>)
 8004c54:	429c      	cmp	r4, r3
 8004c56:	d10f      	bne.n	8004c78 <__swsetup_r+0x3c>
 8004c58:	686c      	ldr	r4, [r5, #4]
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c60:	0719      	lsls	r1, r3, #28
 8004c62:	d42c      	bmi.n	8004cbe <__swsetup_r+0x82>
 8004c64:	06dd      	lsls	r5, r3, #27
 8004c66:	d411      	bmi.n	8004c8c <__swsetup_r+0x50>
 8004c68:	2309      	movs	r3, #9
 8004c6a:	6033      	str	r3, [r6, #0]
 8004c6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	f04f 30ff 	mov.w	r0, #4294967295
 8004c76:	e03e      	b.n	8004cf6 <__swsetup_r+0xba>
 8004c78:	4b25      	ldr	r3, [pc, #148]	; (8004d10 <__swsetup_r+0xd4>)
 8004c7a:	429c      	cmp	r4, r3
 8004c7c:	d101      	bne.n	8004c82 <__swsetup_r+0x46>
 8004c7e:	68ac      	ldr	r4, [r5, #8]
 8004c80:	e7eb      	b.n	8004c5a <__swsetup_r+0x1e>
 8004c82:	4b24      	ldr	r3, [pc, #144]	; (8004d14 <__swsetup_r+0xd8>)
 8004c84:	429c      	cmp	r4, r3
 8004c86:	bf08      	it	eq
 8004c88:	68ec      	ldreq	r4, [r5, #12]
 8004c8a:	e7e6      	b.n	8004c5a <__swsetup_r+0x1e>
 8004c8c:	0758      	lsls	r0, r3, #29
 8004c8e:	d512      	bpl.n	8004cb6 <__swsetup_r+0x7a>
 8004c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c92:	b141      	cbz	r1, 8004ca6 <__swsetup_r+0x6a>
 8004c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c98:	4299      	cmp	r1, r3
 8004c9a:	d002      	beq.n	8004ca2 <__swsetup_r+0x66>
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f7ff fe15 	bl	80048cc <_free_r>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ca6:	89a3      	ldrh	r3, [r4, #12]
 8004ca8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cac:	81a3      	strh	r3, [r4, #12]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	6063      	str	r3, [r4, #4]
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	89a3      	ldrh	r3, [r4, #12]
 8004cb8:	f043 0308 	orr.w	r3, r3, #8
 8004cbc:	81a3      	strh	r3, [r4, #12]
 8004cbe:	6923      	ldr	r3, [r4, #16]
 8004cc0:	b94b      	cbnz	r3, 8004cd6 <__swsetup_r+0x9a>
 8004cc2:	89a3      	ldrh	r3, [r4, #12]
 8004cc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ccc:	d003      	beq.n	8004cd6 <__swsetup_r+0x9a>
 8004cce:	4621      	mov	r1, r4
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f000 fa01 	bl	80050d8 <__smakebuf_r>
 8004cd6:	89a0      	ldrh	r0, [r4, #12]
 8004cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cdc:	f010 0301 	ands.w	r3, r0, #1
 8004ce0:	d00a      	beq.n	8004cf8 <__swsetup_r+0xbc>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60a3      	str	r3, [r4, #8]
 8004ce6:	6963      	ldr	r3, [r4, #20]
 8004ce8:	425b      	negs	r3, r3
 8004cea:	61a3      	str	r3, [r4, #24]
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	b943      	cbnz	r3, 8004d02 <__swsetup_r+0xc6>
 8004cf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004cf4:	d1ba      	bne.n	8004c6c <__swsetup_r+0x30>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	0781      	lsls	r1, r0, #30
 8004cfa:	bf58      	it	pl
 8004cfc:	6963      	ldrpl	r3, [r4, #20]
 8004cfe:	60a3      	str	r3, [r4, #8]
 8004d00:	e7f4      	b.n	8004cec <__swsetup_r+0xb0>
 8004d02:	2000      	movs	r0, #0
 8004d04:	e7f7      	b.n	8004cf6 <__swsetup_r+0xba>
 8004d06:	bf00      	nop
 8004d08:	20000020 	.word	0x20000020
 8004d0c:	080057d0 	.word	0x080057d0
 8004d10:	080057f0 	.word	0x080057f0
 8004d14:	080057b0 	.word	0x080057b0

08004d18 <__sflush_r>:
 8004d18:	898a      	ldrh	r2, [r1, #12]
 8004d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1e:	4605      	mov	r5, r0
 8004d20:	0710      	lsls	r0, r2, #28
 8004d22:	460c      	mov	r4, r1
 8004d24:	d458      	bmi.n	8004dd8 <__sflush_r+0xc0>
 8004d26:	684b      	ldr	r3, [r1, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	dc05      	bgt.n	8004d38 <__sflush_r+0x20>
 8004d2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	dc02      	bgt.n	8004d38 <__sflush_r+0x20>
 8004d32:	2000      	movs	r0, #0
 8004d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d3a:	2e00      	cmp	r6, #0
 8004d3c:	d0f9      	beq.n	8004d32 <__sflush_r+0x1a>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d44:	682f      	ldr	r7, [r5, #0]
 8004d46:	602b      	str	r3, [r5, #0]
 8004d48:	d032      	beq.n	8004db0 <__sflush_r+0x98>
 8004d4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	075a      	lsls	r2, r3, #29
 8004d50:	d505      	bpl.n	8004d5e <__sflush_r+0x46>
 8004d52:	6863      	ldr	r3, [r4, #4]
 8004d54:	1ac0      	subs	r0, r0, r3
 8004d56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d58:	b10b      	cbz	r3, 8004d5e <__sflush_r+0x46>
 8004d5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d5c:	1ac0      	subs	r0, r0, r3
 8004d5e:	2300      	movs	r3, #0
 8004d60:	4602      	mov	r2, r0
 8004d62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d64:	6a21      	ldr	r1, [r4, #32]
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b0      	blx	r6
 8004d6a:	1c43      	adds	r3, r0, #1
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	d106      	bne.n	8004d7e <__sflush_r+0x66>
 8004d70:	6829      	ldr	r1, [r5, #0]
 8004d72:	291d      	cmp	r1, #29
 8004d74:	d82c      	bhi.n	8004dd0 <__sflush_r+0xb8>
 8004d76:	4a2a      	ldr	r2, [pc, #168]	; (8004e20 <__sflush_r+0x108>)
 8004d78:	40ca      	lsrs	r2, r1
 8004d7a:	07d6      	lsls	r6, r2, #31
 8004d7c:	d528      	bpl.n	8004dd0 <__sflush_r+0xb8>
 8004d7e:	2200      	movs	r2, #0
 8004d80:	6062      	str	r2, [r4, #4]
 8004d82:	04d9      	lsls	r1, r3, #19
 8004d84:	6922      	ldr	r2, [r4, #16]
 8004d86:	6022      	str	r2, [r4, #0]
 8004d88:	d504      	bpl.n	8004d94 <__sflush_r+0x7c>
 8004d8a:	1c42      	adds	r2, r0, #1
 8004d8c:	d101      	bne.n	8004d92 <__sflush_r+0x7a>
 8004d8e:	682b      	ldr	r3, [r5, #0]
 8004d90:	b903      	cbnz	r3, 8004d94 <__sflush_r+0x7c>
 8004d92:	6560      	str	r0, [r4, #84]	; 0x54
 8004d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d96:	602f      	str	r7, [r5, #0]
 8004d98:	2900      	cmp	r1, #0
 8004d9a:	d0ca      	beq.n	8004d32 <__sflush_r+0x1a>
 8004d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004da0:	4299      	cmp	r1, r3
 8004da2:	d002      	beq.n	8004daa <__sflush_r+0x92>
 8004da4:	4628      	mov	r0, r5
 8004da6:	f7ff fd91 	bl	80048cc <_free_r>
 8004daa:	2000      	movs	r0, #0
 8004dac:	6360      	str	r0, [r4, #52]	; 0x34
 8004dae:	e7c1      	b.n	8004d34 <__sflush_r+0x1c>
 8004db0:	6a21      	ldr	r1, [r4, #32]
 8004db2:	2301      	movs	r3, #1
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b0      	blx	r6
 8004db8:	1c41      	adds	r1, r0, #1
 8004dba:	d1c7      	bne.n	8004d4c <__sflush_r+0x34>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0c4      	beq.n	8004d4c <__sflush_r+0x34>
 8004dc2:	2b1d      	cmp	r3, #29
 8004dc4:	d001      	beq.n	8004dca <__sflush_r+0xb2>
 8004dc6:	2b16      	cmp	r3, #22
 8004dc8:	d101      	bne.n	8004dce <__sflush_r+0xb6>
 8004dca:	602f      	str	r7, [r5, #0]
 8004dcc:	e7b1      	b.n	8004d32 <__sflush_r+0x1a>
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd4:	81a3      	strh	r3, [r4, #12]
 8004dd6:	e7ad      	b.n	8004d34 <__sflush_r+0x1c>
 8004dd8:	690f      	ldr	r7, [r1, #16]
 8004dda:	2f00      	cmp	r7, #0
 8004ddc:	d0a9      	beq.n	8004d32 <__sflush_r+0x1a>
 8004dde:	0793      	lsls	r3, r2, #30
 8004de0:	680e      	ldr	r6, [r1, #0]
 8004de2:	bf08      	it	eq
 8004de4:	694b      	ldreq	r3, [r1, #20]
 8004de6:	600f      	str	r7, [r1, #0]
 8004de8:	bf18      	it	ne
 8004dea:	2300      	movne	r3, #0
 8004dec:	eba6 0807 	sub.w	r8, r6, r7
 8004df0:	608b      	str	r3, [r1, #8]
 8004df2:	f1b8 0f00 	cmp.w	r8, #0
 8004df6:	dd9c      	ble.n	8004d32 <__sflush_r+0x1a>
 8004df8:	6a21      	ldr	r1, [r4, #32]
 8004dfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004dfc:	4643      	mov	r3, r8
 8004dfe:	463a      	mov	r2, r7
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b0      	blx	r6
 8004e04:	2800      	cmp	r0, #0
 8004e06:	dc06      	bgt.n	8004e16 <__sflush_r+0xfe>
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	e78e      	b.n	8004d34 <__sflush_r+0x1c>
 8004e16:	4407      	add	r7, r0
 8004e18:	eba8 0800 	sub.w	r8, r8, r0
 8004e1c:	e7e9      	b.n	8004df2 <__sflush_r+0xda>
 8004e1e:	bf00      	nop
 8004e20:	20400001 	.word	0x20400001

08004e24 <_fflush_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	690b      	ldr	r3, [r1, #16]
 8004e28:	4605      	mov	r5, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	b913      	cbnz	r3, 8004e34 <_fflush_r+0x10>
 8004e2e:	2500      	movs	r5, #0
 8004e30:	4628      	mov	r0, r5
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	b118      	cbz	r0, 8004e3e <_fflush_r+0x1a>
 8004e36:	6983      	ldr	r3, [r0, #24]
 8004e38:	b90b      	cbnz	r3, 8004e3e <_fflush_r+0x1a>
 8004e3a:	f000 f887 	bl	8004f4c <__sinit>
 8004e3e:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <_fflush_r+0x6c>)
 8004e40:	429c      	cmp	r4, r3
 8004e42:	d11b      	bne.n	8004e7c <_fflush_r+0x58>
 8004e44:	686c      	ldr	r4, [r5, #4]
 8004e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0ef      	beq.n	8004e2e <_fflush_r+0xa>
 8004e4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e50:	07d0      	lsls	r0, r2, #31
 8004e52:	d404      	bmi.n	8004e5e <_fflush_r+0x3a>
 8004e54:	0599      	lsls	r1, r3, #22
 8004e56:	d402      	bmi.n	8004e5e <_fflush_r+0x3a>
 8004e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e5a:	f000 f915 	bl	8005088 <__retarget_lock_acquire_recursive>
 8004e5e:	4628      	mov	r0, r5
 8004e60:	4621      	mov	r1, r4
 8004e62:	f7ff ff59 	bl	8004d18 <__sflush_r>
 8004e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e68:	07da      	lsls	r2, r3, #31
 8004e6a:	4605      	mov	r5, r0
 8004e6c:	d4e0      	bmi.n	8004e30 <_fflush_r+0xc>
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	059b      	lsls	r3, r3, #22
 8004e72:	d4dd      	bmi.n	8004e30 <_fflush_r+0xc>
 8004e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e76:	f000 f908 	bl	800508a <__retarget_lock_release_recursive>
 8004e7a:	e7d9      	b.n	8004e30 <_fflush_r+0xc>
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <_fflush_r+0x70>)
 8004e7e:	429c      	cmp	r4, r3
 8004e80:	d101      	bne.n	8004e86 <_fflush_r+0x62>
 8004e82:	68ac      	ldr	r4, [r5, #8]
 8004e84:	e7df      	b.n	8004e46 <_fflush_r+0x22>
 8004e86:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <_fflush_r+0x74>)
 8004e88:	429c      	cmp	r4, r3
 8004e8a:	bf08      	it	eq
 8004e8c:	68ec      	ldreq	r4, [r5, #12]
 8004e8e:	e7da      	b.n	8004e46 <_fflush_r+0x22>
 8004e90:	080057d0 	.word	0x080057d0
 8004e94:	080057f0 	.word	0x080057f0
 8004e98:	080057b0 	.word	0x080057b0

08004e9c <std>:
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	b510      	push	{r4, lr}
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eaa:	6083      	str	r3, [r0, #8]
 8004eac:	8181      	strh	r1, [r0, #12]
 8004eae:	6643      	str	r3, [r0, #100]	; 0x64
 8004eb0:	81c2      	strh	r2, [r0, #14]
 8004eb2:	6183      	str	r3, [r0, #24]
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	2208      	movs	r2, #8
 8004eb8:	305c      	adds	r0, #92	; 0x5c
 8004eba:	f7ff fcff 	bl	80048bc <memset>
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <std+0x38>)
 8004ec0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <std+0x3c>)
 8004ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ec6:	4b05      	ldr	r3, [pc, #20]	; (8004edc <std+0x40>)
 8004ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <std+0x44>)
 8004ecc:	6224      	str	r4, [r4, #32]
 8004ece:	6323      	str	r3, [r4, #48]	; 0x30
 8004ed0:	bd10      	pop	{r4, pc}
 8004ed2:	bf00      	nop
 8004ed4:	08005171 	.word	0x08005171
 8004ed8:	08005193 	.word	0x08005193
 8004edc:	080051cb 	.word	0x080051cb
 8004ee0:	080051ef 	.word	0x080051ef

08004ee4 <_cleanup_r>:
 8004ee4:	4901      	ldr	r1, [pc, #4]	; (8004eec <_cleanup_r+0x8>)
 8004ee6:	f000 b8af 	b.w	8005048 <_fwalk_reent>
 8004eea:	bf00      	nop
 8004eec:	08004e25 	.word	0x08004e25

08004ef0 <__sfmoreglue>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	2268      	movs	r2, #104	; 0x68
 8004ef4:	1e4d      	subs	r5, r1, #1
 8004ef6:	4355      	muls	r5, r2
 8004ef8:	460e      	mov	r6, r1
 8004efa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004efe:	f7ff fd51 	bl	80049a4 <_malloc_r>
 8004f02:	4604      	mov	r4, r0
 8004f04:	b140      	cbz	r0, 8004f18 <__sfmoreglue+0x28>
 8004f06:	2100      	movs	r1, #0
 8004f08:	e9c0 1600 	strd	r1, r6, [r0]
 8004f0c:	300c      	adds	r0, #12
 8004f0e:	60a0      	str	r0, [r4, #8]
 8004f10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f14:	f7ff fcd2 	bl	80048bc <memset>
 8004f18:	4620      	mov	r0, r4
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}

08004f1c <__sfp_lock_acquire>:
 8004f1c:	4801      	ldr	r0, [pc, #4]	; (8004f24 <__sfp_lock_acquire+0x8>)
 8004f1e:	f000 b8b3 	b.w	8005088 <__retarget_lock_acquire_recursive>
 8004f22:	bf00      	nop
 8004f24:	20000345 	.word	0x20000345

08004f28 <__sfp_lock_release>:
 8004f28:	4801      	ldr	r0, [pc, #4]	; (8004f30 <__sfp_lock_release+0x8>)
 8004f2a:	f000 b8ae 	b.w	800508a <__retarget_lock_release_recursive>
 8004f2e:	bf00      	nop
 8004f30:	20000345 	.word	0x20000345

08004f34 <__sinit_lock_acquire>:
 8004f34:	4801      	ldr	r0, [pc, #4]	; (8004f3c <__sinit_lock_acquire+0x8>)
 8004f36:	f000 b8a7 	b.w	8005088 <__retarget_lock_acquire_recursive>
 8004f3a:	bf00      	nop
 8004f3c:	20000346 	.word	0x20000346

08004f40 <__sinit_lock_release>:
 8004f40:	4801      	ldr	r0, [pc, #4]	; (8004f48 <__sinit_lock_release+0x8>)
 8004f42:	f000 b8a2 	b.w	800508a <__retarget_lock_release_recursive>
 8004f46:	bf00      	nop
 8004f48:	20000346 	.word	0x20000346

08004f4c <__sinit>:
 8004f4c:	b510      	push	{r4, lr}
 8004f4e:	4604      	mov	r4, r0
 8004f50:	f7ff fff0 	bl	8004f34 <__sinit_lock_acquire>
 8004f54:	69a3      	ldr	r3, [r4, #24]
 8004f56:	b11b      	cbz	r3, 8004f60 <__sinit+0x14>
 8004f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f5c:	f7ff bff0 	b.w	8004f40 <__sinit_lock_release>
 8004f60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f64:	6523      	str	r3, [r4, #80]	; 0x50
 8004f66:	4b13      	ldr	r3, [pc, #76]	; (8004fb4 <__sinit+0x68>)
 8004f68:	4a13      	ldr	r2, [pc, #76]	; (8004fb8 <__sinit+0x6c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f6e:	42a3      	cmp	r3, r4
 8004f70:	bf04      	itt	eq
 8004f72:	2301      	moveq	r3, #1
 8004f74:	61a3      	streq	r3, [r4, #24]
 8004f76:	4620      	mov	r0, r4
 8004f78:	f000 f820 	bl	8004fbc <__sfp>
 8004f7c:	6060      	str	r0, [r4, #4]
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f000 f81c 	bl	8004fbc <__sfp>
 8004f84:	60a0      	str	r0, [r4, #8]
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 f818 	bl	8004fbc <__sfp>
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	60e0      	str	r0, [r4, #12]
 8004f90:	2104      	movs	r1, #4
 8004f92:	6860      	ldr	r0, [r4, #4]
 8004f94:	f7ff ff82 	bl	8004e9c <std>
 8004f98:	68a0      	ldr	r0, [r4, #8]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	2109      	movs	r1, #9
 8004f9e:	f7ff ff7d 	bl	8004e9c <std>
 8004fa2:	68e0      	ldr	r0, [r4, #12]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	2112      	movs	r1, #18
 8004fa8:	f7ff ff78 	bl	8004e9c <std>
 8004fac:	2301      	movs	r3, #1
 8004fae:	61a3      	str	r3, [r4, #24]
 8004fb0:	e7d2      	b.n	8004f58 <__sinit+0xc>
 8004fb2:	bf00      	nop
 8004fb4:	080057ac 	.word	0x080057ac
 8004fb8:	08004ee5 	.word	0x08004ee5

08004fbc <__sfp>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	4607      	mov	r7, r0
 8004fc0:	f7ff ffac 	bl	8004f1c <__sfp_lock_acquire>
 8004fc4:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <__sfp+0x84>)
 8004fc6:	681e      	ldr	r6, [r3, #0]
 8004fc8:	69b3      	ldr	r3, [r6, #24]
 8004fca:	b913      	cbnz	r3, 8004fd2 <__sfp+0x16>
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f7ff ffbd 	bl	8004f4c <__sinit>
 8004fd2:	3648      	adds	r6, #72	; 0x48
 8004fd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	d503      	bpl.n	8004fe4 <__sfp+0x28>
 8004fdc:	6833      	ldr	r3, [r6, #0]
 8004fde:	b30b      	cbz	r3, 8005024 <__sfp+0x68>
 8004fe0:	6836      	ldr	r6, [r6, #0]
 8004fe2:	e7f7      	b.n	8004fd4 <__sfp+0x18>
 8004fe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fe8:	b9d5      	cbnz	r5, 8005020 <__sfp+0x64>
 8004fea:	4b16      	ldr	r3, [pc, #88]	; (8005044 <__sfp+0x88>)
 8004fec:	60e3      	str	r3, [r4, #12]
 8004fee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ff2:	6665      	str	r5, [r4, #100]	; 0x64
 8004ff4:	f000 f847 	bl	8005086 <__retarget_lock_init_recursive>
 8004ff8:	f7ff ff96 	bl	8004f28 <__sfp_lock_release>
 8004ffc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005000:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005004:	6025      	str	r5, [r4, #0]
 8005006:	61a5      	str	r5, [r4, #24]
 8005008:	2208      	movs	r2, #8
 800500a:	4629      	mov	r1, r5
 800500c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005010:	f7ff fc54 	bl	80048bc <memset>
 8005014:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005018:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800501c:	4620      	mov	r0, r4
 800501e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005020:	3468      	adds	r4, #104	; 0x68
 8005022:	e7d9      	b.n	8004fd8 <__sfp+0x1c>
 8005024:	2104      	movs	r1, #4
 8005026:	4638      	mov	r0, r7
 8005028:	f7ff ff62 	bl	8004ef0 <__sfmoreglue>
 800502c:	4604      	mov	r4, r0
 800502e:	6030      	str	r0, [r6, #0]
 8005030:	2800      	cmp	r0, #0
 8005032:	d1d5      	bne.n	8004fe0 <__sfp+0x24>
 8005034:	f7ff ff78 	bl	8004f28 <__sfp_lock_release>
 8005038:	230c      	movs	r3, #12
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	e7ee      	b.n	800501c <__sfp+0x60>
 800503e:	bf00      	nop
 8005040:	080057ac 	.word	0x080057ac
 8005044:	ffff0001 	.word	0xffff0001

08005048 <_fwalk_reent>:
 8005048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800504c:	4606      	mov	r6, r0
 800504e:	4688      	mov	r8, r1
 8005050:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005054:	2700      	movs	r7, #0
 8005056:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800505a:	f1b9 0901 	subs.w	r9, r9, #1
 800505e:	d505      	bpl.n	800506c <_fwalk_reent+0x24>
 8005060:	6824      	ldr	r4, [r4, #0]
 8005062:	2c00      	cmp	r4, #0
 8005064:	d1f7      	bne.n	8005056 <_fwalk_reent+0xe>
 8005066:	4638      	mov	r0, r7
 8005068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800506c:	89ab      	ldrh	r3, [r5, #12]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d907      	bls.n	8005082 <_fwalk_reent+0x3a>
 8005072:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005076:	3301      	adds	r3, #1
 8005078:	d003      	beq.n	8005082 <_fwalk_reent+0x3a>
 800507a:	4629      	mov	r1, r5
 800507c:	4630      	mov	r0, r6
 800507e:	47c0      	blx	r8
 8005080:	4307      	orrs	r7, r0
 8005082:	3568      	adds	r5, #104	; 0x68
 8005084:	e7e9      	b.n	800505a <_fwalk_reent+0x12>

08005086 <__retarget_lock_init_recursive>:
 8005086:	4770      	bx	lr

08005088 <__retarget_lock_acquire_recursive>:
 8005088:	4770      	bx	lr

0800508a <__retarget_lock_release_recursive>:
 800508a:	4770      	bx	lr

0800508c <__swhatbuf_r>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	460e      	mov	r6, r1
 8005090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005094:	2900      	cmp	r1, #0
 8005096:	b096      	sub	sp, #88	; 0x58
 8005098:	4614      	mov	r4, r2
 800509a:	461d      	mov	r5, r3
 800509c:	da08      	bge.n	80050b0 <__swhatbuf_r+0x24>
 800509e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	602a      	str	r2, [r5, #0]
 80050a6:	061a      	lsls	r2, r3, #24
 80050a8:	d410      	bmi.n	80050cc <__swhatbuf_r+0x40>
 80050aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ae:	e00e      	b.n	80050ce <__swhatbuf_r+0x42>
 80050b0:	466a      	mov	r2, sp
 80050b2:	f000 f8c3 	bl	800523c <_fstat_r>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	dbf1      	blt.n	800509e <__swhatbuf_r+0x12>
 80050ba:	9a01      	ldr	r2, [sp, #4]
 80050bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80050c4:	425a      	negs	r2, r3
 80050c6:	415a      	adcs	r2, r3
 80050c8:	602a      	str	r2, [r5, #0]
 80050ca:	e7ee      	b.n	80050aa <__swhatbuf_r+0x1e>
 80050cc:	2340      	movs	r3, #64	; 0x40
 80050ce:	2000      	movs	r0, #0
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	b016      	add	sp, #88	; 0x58
 80050d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080050d8 <__smakebuf_r>:
 80050d8:	898b      	ldrh	r3, [r1, #12]
 80050da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050dc:	079d      	lsls	r5, r3, #30
 80050de:	4606      	mov	r6, r0
 80050e0:	460c      	mov	r4, r1
 80050e2:	d507      	bpl.n	80050f4 <__smakebuf_r+0x1c>
 80050e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	2301      	movs	r3, #1
 80050ee:	6163      	str	r3, [r4, #20]
 80050f0:	b002      	add	sp, #8
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	ab01      	add	r3, sp, #4
 80050f6:	466a      	mov	r2, sp
 80050f8:	f7ff ffc8 	bl	800508c <__swhatbuf_r>
 80050fc:	9900      	ldr	r1, [sp, #0]
 80050fe:	4605      	mov	r5, r0
 8005100:	4630      	mov	r0, r6
 8005102:	f7ff fc4f 	bl	80049a4 <_malloc_r>
 8005106:	b948      	cbnz	r0, 800511c <__smakebuf_r+0x44>
 8005108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800510c:	059a      	lsls	r2, r3, #22
 800510e:	d4ef      	bmi.n	80050f0 <__smakebuf_r+0x18>
 8005110:	f023 0303 	bic.w	r3, r3, #3
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	e7e3      	b.n	80050e4 <__smakebuf_r+0xc>
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <__smakebuf_r+0x7c>)
 800511e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	6020      	str	r0, [r4, #0]
 8005124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005128:	81a3      	strh	r3, [r4, #12]
 800512a:	9b00      	ldr	r3, [sp, #0]
 800512c:	6163      	str	r3, [r4, #20]
 800512e:	9b01      	ldr	r3, [sp, #4]
 8005130:	6120      	str	r0, [r4, #16]
 8005132:	b15b      	cbz	r3, 800514c <__smakebuf_r+0x74>
 8005134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005138:	4630      	mov	r0, r6
 800513a:	f000 f891 	bl	8005260 <_isatty_r>
 800513e:	b128      	cbz	r0, 800514c <__smakebuf_r+0x74>
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	f023 0303 	bic.w	r3, r3, #3
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	89a0      	ldrh	r0, [r4, #12]
 800514e:	4305      	orrs	r5, r0
 8005150:	81a5      	strh	r5, [r4, #12]
 8005152:	e7cd      	b.n	80050f0 <__smakebuf_r+0x18>
 8005154:	08004ee5 	.word	0x08004ee5

08005158 <__malloc_lock>:
 8005158:	4801      	ldr	r0, [pc, #4]	; (8005160 <__malloc_lock+0x8>)
 800515a:	f7ff bf95 	b.w	8005088 <__retarget_lock_acquire_recursive>
 800515e:	bf00      	nop
 8005160:	20000344 	.word	0x20000344

08005164 <__malloc_unlock>:
 8005164:	4801      	ldr	r0, [pc, #4]	; (800516c <__malloc_unlock+0x8>)
 8005166:	f7ff bf90 	b.w	800508a <__retarget_lock_release_recursive>
 800516a:	bf00      	nop
 800516c:	20000344 	.word	0x20000344

08005170 <__sread>:
 8005170:	b510      	push	{r4, lr}
 8005172:	460c      	mov	r4, r1
 8005174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005178:	f000 f894 	bl	80052a4 <_read_r>
 800517c:	2800      	cmp	r0, #0
 800517e:	bfab      	itete	ge
 8005180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005182:	89a3      	ldrhlt	r3, [r4, #12]
 8005184:	181b      	addge	r3, r3, r0
 8005186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800518a:	bfac      	ite	ge
 800518c:	6563      	strge	r3, [r4, #84]	; 0x54
 800518e:	81a3      	strhlt	r3, [r4, #12]
 8005190:	bd10      	pop	{r4, pc}

08005192 <__swrite>:
 8005192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005196:	461f      	mov	r7, r3
 8005198:	898b      	ldrh	r3, [r1, #12]
 800519a:	05db      	lsls	r3, r3, #23
 800519c:	4605      	mov	r5, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	4616      	mov	r6, r2
 80051a2:	d505      	bpl.n	80051b0 <__swrite+0x1e>
 80051a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a8:	2302      	movs	r3, #2
 80051aa:	2200      	movs	r2, #0
 80051ac:	f000 f868 	bl	8005280 <_lseek_r>
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ba:	81a3      	strh	r3, [r4, #12]
 80051bc:	4632      	mov	r2, r6
 80051be:	463b      	mov	r3, r7
 80051c0:	4628      	mov	r0, r5
 80051c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051c6:	f000 b817 	b.w	80051f8 <_write_r>

080051ca <__sseek>:
 80051ca:	b510      	push	{r4, lr}
 80051cc:	460c      	mov	r4, r1
 80051ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d2:	f000 f855 	bl	8005280 <_lseek_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	bf15      	itete	ne
 80051dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80051de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051e6:	81a3      	strheq	r3, [r4, #12]
 80051e8:	bf18      	it	ne
 80051ea:	81a3      	strhne	r3, [r4, #12]
 80051ec:	bd10      	pop	{r4, pc}

080051ee <__sclose>:
 80051ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f2:	f000 b813 	b.w	800521c <_close_r>
	...

080051f8 <_write_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4d07      	ldr	r5, [pc, #28]	; (8005218 <_write_r+0x20>)
 80051fc:	4604      	mov	r4, r0
 80051fe:	4608      	mov	r0, r1
 8005200:	4611      	mov	r1, r2
 8005202:	2200      	movs	r2, #0
 8005204:	602a      	str	r2, [r5, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	f7fb fba3 	bl	8000952 <_write>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	d102      	bne.n	8005216 <_write_r+0x1e>
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	b103      	cbz	r3, 8005216 <_write_r+0x1e>
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	bd38      	pop	{r3, r4, r5, pc}
 8005218:	20000348 	.word	0x20000348

0800521c <_close_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4d06      	ldr	r5, [pc, #24]	; (8005238 <_close_r+0x1c>)
 8005220:	2300      	movs	r3, #0
 8005222:	4604      	mov	r4, r0
 8005224:	4608      	mov	r0, r1
 8005226:	602b      	str	r3, [r5, #0]
 8005228:	f7fb fbaf 	bl	800098a <_close>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_close_r+0x1a>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_close_r+0x1a>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	20000348 	.word	0x20000348

0800523c <_fstat_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d07      	ldr	r5, [pc, #28]	; (800525c <_fstat_r+0x20>)
 8005240:	2300      	movs	r3, #0
 8005242:	4604      	mov	r4, r0
 8005244:	4608      	mov	r0, r1
 8005246:	4611      	mov	r1, r2
 8005248:	602b      	str	r3, [r5, #0]
 800524a:	f7fb fbaa 	bl	80009a2 <_fstat>
 800524e:	1c43      	adds	r3, r0, #1
 8005250:	d102      	bne.n	8005258 <_fstat_r+0x1c>
 8005252:	682b      	ldr	r3, [r5, #0]
 8005254:	b103      	cbz	r3, 8005258 <_fstat_r+0x1c>
 8005256:	6023      	str	r3, [r4, #0]
 8005258:	bd38      	pop	{r3, r4, r5, pc}
 800525a:	bf00      	nop
 800525c:	20000348 	.word	0x20000348

08005260 <_isatty_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4d06      	ldr	r5, [pc, #24]	; (800527c <_isatty_r+0x1c>)
 8005264:	2300      	movs	r3, #0
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	f7fb fba9 	bl	80009c2 <_isatty>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_isatty_r+0x1a>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_isatty_r+0x1a>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	20000348 	.word	0x20000348

08005280 <_lseek_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4d07      	ldr	r5, [pc, #28]	; (80052a0 <_lseek_r+0x20>)
 8005284:	4604      	mov	r4, r0
 8005286:	4608      	mov	r0, r1
 8005288:	4611      	mov	r1, r2
 800528a:	2200      	movs	r2, #0
 800528c:	602a      	str	r2, [r5, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	f7fb fba2 	bl	80009d8 <_lseek>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d102      	bne.n	800529e <_lseek_r+0x1e>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	b103      	cbz	r3, 800529e <_lseek_r+0x1e>
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	20000348 	.word	0x20000348

080052a4 <_read_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	4d07      	ldr	r5, [pc, #28]	; (80052c4 <_read_r+0x20>)
 80052a8:	4604      	mov	r4, r0
 80052aa:	4608      	mov	r0, r1
 80052ac:	4611      	mov	r1, r2
 80052ae:	2200      	movs	r2, #0
 80052b0:	602a      	str	r2, [r5, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f7fb fb30 	bl	8000918 <_read>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_read_r+0x1e>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_read_r+0x1e>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	20000348 	.word	0x20000348

080052c8 <_init>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	bf00      	nop
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr

080052d4 <_fini>:
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d6:	bf00      	nop
 80052d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052da:	bc08      	pop	{r3}
 80052dc:	469e      	mov	lr, r3
 80052de:	4770      	bx	lr
